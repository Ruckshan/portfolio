{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport camelcase from 'camelcase';\n/**\r\n * Takes an object as argument and for each key in the object adds a camel case variant of the key.\r\n * @param input T The object for which camel cased keys are to be added.\r\n */\n\nexport function addCamelCaseKeys(input) {\n  var output = Object.assign({}, input);\n  Object.keys(input).forEach(function (key) {\n    var transformedKey = key.replace(/--/g, '-');\n    output[camelcase(transformedKey)] = input[key];\n  });\n  return output;\n}\n/**\r\n * Rounds the given value a even number.\r\n * @param val The value to be rounded to a even number.\r\n */\n\nexport function roundToEven(val) {\n  val = Math.floor(val);\n\n  if (val % 2) {\n    return val + 1;\n  }\n\n  return val;\n}\n/**\r\n * Converts any date string to <month> <day>, <year> format.\r\n * @param date Any string valid for {@link Date}.\r\n */\n\nexport function formatDate(date) {\n  if (date) {\n    var dateString = new Date(date).toDateString();\n\n    var _dateString$split = dateString.split(' '),\n        _dateString$split2 = _slicedToArray(_dateString$split, 4),\n        _ = _dateString$split2[0],\n        month = _dateString$split2[1],\n        day = _dateString$split2[2],\n        year = _dateString$split2[3];\n\n    return \"\".concat(day, \" \").concat(month, \", \").concat(year);\n  }\n\n  return '';\n}\n/**\r\n * Generates a random number between a given range.\r\n * @param min The start of the range.\r\n * @param max The end of the range.\r\n */\n\nexport function randomBetween(min, max) {\n  var minimum = Math.min(min, max);\n  var maximum = Math.min(min, max);\n  var range = maximum - minimum;\n  return minimum + Math.floor(Math.random() * range);\n}","map":null,"metadata":{},"sourceType":"module"}