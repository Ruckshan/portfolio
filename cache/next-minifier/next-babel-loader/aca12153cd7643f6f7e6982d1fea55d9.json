{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\n/**\r\n * Represents a math vector with x, y position, direction and magnitude.\r\n */\nexport var Vector = /*#__PURE__*/function () {\n  /**\r\n   * The x position of the vector.\r\n   */\n\n  /**\r\n   * The y position of the vector.\r\n   */\n\n  /**\r\n   * The angle of the vector to the vector.\r\n   */\n\n  /**\r\n   * The distance between the vector's current position to unity.\r\n   */\n  function Vector(x, y) {\n    _classCallCheck(this, Vector);\n\n    _defineProperty(this, \"x\", void 0);\n\n    _defineProperty(this, \"y\", void 0);\n\n    _defineProperty(this, \"angle\", void 0);\n\n    _defineProperty(this, \"length\", void 0);\n\n    this._compute(x, y);\n  }\n\n  _createClass(Vector, [{\n    key: \"_compute\",\n    value: function _compute(x, y) {\n      this.x = x;\n      this.y = y;\n      this.angle = Math.atan2(y, x);\n      this.length = Math.sqrt(x * x + y * y);\n    }\n    /**\r\n     * Sets the angle of the vector with respect to the unit vector.\r\n     * @param angle The angle to unity.\r\n     */\n\n  }, {\n    key: \"setAngle\",\n    value: function setAngle(angle) {\n      this.angle = angle;\n      this.x = Math.cos(this.angle) * this.length;\n      this.y = Math.sin(this.angle) * this.length;\n    }\n    /**\r\n     * Sets the distance to unit vector.\r\n     * @param length The length to the unit vector.\r\n     */\n\n  }, {\n    key: \"setLength\",\n    value: function setLength(length) {\n      this.length = length;\n      this.x = Math.cos(this.angle) * this.length;\n      this.y = Math.sin(this.angle) * this.length;\n    }\n    /**\r\n     * Add the given vector to the current vector.\r\n     * @param v The vector to add.\r\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(v) {\n      this._compute(this.x + v.x, this.y + v.y);\n    }\n    /**\r\n     * Subtracts the given vector to the current vector.\r\n     * @param v The vector to subtract.\r\n     */\n\n  }, {\n    key: \"subtract\",\n    value: function subtract(v) {\n      this._compute(this.x - v.x, this.y - v.y);\n    }\n    /**\r\n     * Multiplies the current vector by a scalar.\r\n     * @param scalar The scalar to multiply.\r\n     */\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(scalar) {\n      this._compute(this.x * scalar, this.y * scalar);\n    }\n    /**\r\n     * Divides the current vector by a scalar.\r\n     * @param scalar The scalar to divide.\r\n     */\n\n  }, {\n    key: \"divide\",\n    value: function divide(scalar) {\n      this._compute(this.x / scalar, this.y / scalar);\n    }\n    /**\r\n     * Adds two vectors together.\r\n     * @param v1 Vector operand one for addition.\r\n     * @param v2  Vector operand two for addition.\r\n     */\n\n  }], [{\n    key: \"add\",\n    value: function add(v1, v2) {\n      var x = v1.x + v2.x;\n      var y = v1.y + v2.y;\n      return new Vector(x, y);\n    }\n    /**\r\n     * Subtract two vectors.\r\n     * @param v1 Vector operand one for subtraction.\r\n     * @param v2  Vector operand two for subtraction.\r\n     */\n\n  }, {\n    key: \"subtract\",\n    value: function subtract(v1, v2) {\n      var x = v1.x - v2.x;\n      var y = v1.y - v2.y;\n      return new Vector(x, y);\n    }\n    /**\r\n     * Multiplies a vector and a scalar.\r\n     * @param v1 Vector operand for multiplication.\r\n     * @param v2 Scalar operand for multiplication.\r\n     */\n\n  }, {\n    key: \"multiply\",\n    value: function multiply(v, k) {\n      return new Vector(v.x * k, v.y * k);\n    }\n  }]);\n\n  return Vector;\n}();","map":null,"metadata":{},"sourceType":"module"}