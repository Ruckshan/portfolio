{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useState } from 'react';\nimport { API_URLS } from '../../constants';\n\n/**\r\n * Custom hook that fetches nuggets for a given page.\r\n * @param initialNuggets The set of initial nuggets.\r\n * @param tag The tag to filter the nuggets by.\r\n * @param nuggetsPerPage The number of nuggets per pave.\r\n */\nexport var useNuggets = function useNuggets(initialNuggets) {\n  var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var nuggetsPerPage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n\n  var _useState = useState(1),\n      page = _useState[0],\n      setPage = _useState[1];\n\n  var _useState2 = useState(initialNuggets),\n      nuggets = _useState2[0],\n      setNuggets = _useState2[1];\n\n  var _useState3 = useState(nuggets.length >= nuggetsPerPage),\n      hasMore = _useState3[0],\n      setHasMore = _useState3[1];\n\n  var fetchMoreNuggets = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var params, url, response, newNuggets;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              params = new URLSearchParams({\n                page: String(page + 1),\n                per_page: String(nuggetsPerPage),\n                tag: tag\n              });\n              url = \"\".concat(API_URLS.NUGGETS, \"?\").concat(params);\n              console.log('Fetching more nuggets: ', url);\n              _context.next = 5;\n              return fetch(url);\n\n            case 5:\n              response = _context.sent;\n              _context.next = 8;\n              return response.json();\n\n            case 8:\n              newNuggets = _context.sent;\n              setNuggets([].concat(_toConsumableArray(nuggets), _toConsumableArray(newNuggets)));\n              setHasMore(newNuggets.length >= nuggetsPerPage);\n              setPage(function (page) {\n                return page + 1;\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchMoreNuggets() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return [nuggets, hasMore, fetchMoreNuggets];\n};","map":null,"metadata":{},"sourceType":"module"}