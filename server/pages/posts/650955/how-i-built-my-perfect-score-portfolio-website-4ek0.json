{"pageProps":{"post":{"type_of":"article","id":650955,"title":"How I Built My Perfect Score Portfolio Website ","description":"In this article, we'll discuss how I implemented six different color themes, created interactive content that works with and without JavaScript and got a perfect lighthouse score on my website","readable_publish_date":"Mar 31","slug":"how-i-built-my-perfect-score-portfolio-website-4ek0","path":"/jemimaabu/how-i-built-my-perfect-score-portfolio-website-4ek0","url":"https://dev.to/jemimaabu/how-i-built-my-perfect-score-portfolio-website-4ek0","comments_count":14,"public_reactions_count":341,"collection_id":null,"published_timestamp":"2021-03-31T11:15:43Z","positive_reactions_count":341,"cover_image":null,"social_image":"https://dev.to/social_previews/article/650955.png","canonical_url":"https://blog.jemimaabu.com/how-i-built-my-perfect-score-portfolio-website/","created_at":"2021-03-31T11:15:43Z","edited_at":"2021-04-06T10:48:52Z","crossposted_at":null,"published_at":"2021-03-31T11:15:43Z","last_comment_at":"2021-07-12T11:11:34Z","reading_time_minutes":8,"tag_list":["portfolio","a11y","performance","javascript"],"tags":["portfolio","a11y","performance","javascript"],"body_html":"<p>I recently published the fourth version of my portfolio <a href=\"https://www.jemimaabu.com\">jemimaabu.com</a>. <br>\nWith this version, I tried to make the code as performant and accessible as possible but still have an interactive site, so this article will be about how I managed to achieve that. </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tPY1pi_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617172505481/lkQXyI6sI.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--tPY1pi_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617172505481/lkQXyI6sI.gif\" alt=\"portfolio-designs-tiny.gif\" loading=\"lazy\"></a></p>\n\n<p>These are the following features in my portfolio that we'll be discussing:</p>\n\n<ul>\n<li>Clear content and easy to navigate.</li>\n<li>Built with HTML, CSS and JavaScript (no frameworks or libraries)</li>\n<li>Works on JS-disabled browsers</li>\n<li>Vanilla JavaScript implementation of smart navigation and animate on scroll</li>\n<li>6 different color themes</li>\n<li>Perfect scores on accessibility, performance, best practices and SEO</li>\n</ul>\n\n<p>I shared the portfolio on Twitter once I was done and it <a href=\"https://twitter.com/Jemimaabu/status/1376830168334012422\">got a lot of feedback</a> and I also got messages from people asking about certain features so I decided to write this article to explain these features.</p>\n<h2>\n  <a name=\"1-creating-the-design\" href=\"#1-creating-the-design\">\n  </a>\n  1. Creating The Design\n</h2>\n\n<p>It took me about a month to come up with the design for my portfolio, mostly because I designed the entire thing on a trial and error basis - swapping out different layouts and colors till I liked how it looked. </p>\n\n<p>I also went around the internet looking at other people's portfolios for inspiration and using features that I liked.</p>\n\n<p>These are some of the portfolios that I got inspiration from:</p>\n\n<ul>\n<li> <a href=\"https://www.usecue.com/\">Usecue</a> - perfect lighthouse score, call to action buttons for next and previous item</li>\n<li>\n<a href=\"https://rfarn.com/\">RFarn</a> - large text loading screen, slightly fixed header on scroll to offset the <a href=\"https://developers.google.com/web/updates/2016/12/url-bar-resizing\">URL bar resizing</a> </li>\n<li>\n<a href=\"http://webinsane.com/\">Webinsane</a> - brown color theme, the font 'Inter'</li>\n<li>\n<a href=\"https://www.havardbrynjulfsen.com/\">HÃ¥vard Brynjulfsen</a> - vaporwave theme </li>\n</ul>\n<h3>\n  <a name=\"clear-content\" href=\"#clear-content\">\n  </a>\n  Clear content\n</h3>\n\n<p>A major reason I wanted to revamp my portfolio from <a href=\"https://v3.jemimaabu.com\">the previous version</a> was to have all my content on my site without overloading the landing page.</p>\n\n<p>I had different pages for each content and chose designs I felt would best present the information:</p>\n\n<ul>\n<li>\n<a href=\"https://www.jemimaabu.com/about\">About page</a> - splitting sections into expandable details to reduce text appearance on page</li>\n<li> <a href=\"https://www.jemimaabu.com/articles\">Articles page</a>  - simple article title and description display according to how most blog posts are displayed</li>\n<li> <a href=\"https://www.jemimaabu.com/talks\">Talks page</a> - information set in responsive table (the table converts to a list on smaller screens)</li>\n<li> <a href=\"https://www.jemimaabu.com/projects\">Projects page</a>  - projects set in slider carousel so I could include as many projects without having a terribly long page.</li>\n</ul>\n\n<p>I also included selected parts of each content on the <a href=\"https://www.jemimaabu.com\">landing page</a>  along with a call-to-action button leading to each page to encourage user navigation.</p>\n<h2>\n  <a name=\"2-writing-the-code\" href=\"#2-writing-the-code\">\n  </a>\n  2. Writing the code\n</h2>\n\n<p>Ever since the <a href=\"http://v2.jemimaabu.com\">second version</a> of my portfolio, which was easily the least performant version of all versions, I've always built my portfolios from scratch with HTML and CSS, using as little JavaScript dependency as possible.</p>\n\n<p>I also try to avoid using frameworks or libraries so I can optimize my code for performance and accessibility.</p>\n<h3>\n  <a name=\"works-on-nonjs-browsers\" href=\"#works-on-nonjs-browsers\">\n  </a>\n  Works on non-JS browsers\n</h3>\n\n<p>A lot of interactions on the page are actually done with CSS or semantic HTML and not JavaScript, such as:</p>\n\n<ul>\n<li>filter on Articles and <a href=\"https://www.jemimaabu.com/presskit\">Presskit</a> pages - <a href=\"https://webdesign.tutsplus.com/tutorials/how-to-build-a-filtering-component-in-pure-css--cms-33111\">How to Build a Filtering Component in Pure CSS</a>\n</li>\n<li>slider carousel on Projects page - <a href=\"https://css-tricks.com/css-only-carousel/\">CSS-Only Carousel</a>\n</li>\n<li>expandable content on About page using HTML details - <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details\">The Details disclosure element</a> </li>\n</ul>\n\n<p>The benefit of this is that the site isn't dependent on JavaScript for displaying information so it still works without it.</p>\n<h3>\n  <a name=\"vanilla-js-implementation\" href=\"#vanilla-js-implementation\">\n  </a>\n  Vanilla JS Implementation\n</h3>\n\n<p>I used JavaScript to handle minor interactions on the page such as elements fading in on scroll, the smart navigation and handling multiple color themes. I also wrote two articles on how I did this:</p>\n\n<ul>\n<li> <a href=\"https://webdesign.tutsplus.com/tutorials/animate-on-scroll-with-javascript--cms-36671\">How to Animate on Scroll With Vanilla JavaScript</a> on Envato Tuts+ and,</li>\n<li>\n<a href=\"https://css-tricks.com/creating-a-smart-navbar-with-vanilla-javascript/\">Creating a Smart Navbar With Vanilla JavaScript</a> on CSS-Tricks</li>\n</ul>\n\n<p>In order to ensure that the content wasn't dependent on being displayed with JavaScript, I only implemented the effects on the elements once the JavaScript had loaded. For example, for the <code>scroll-in</code> element, my JavaScript code looked like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">scrollElements</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">el</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">el</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">js-opacity</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">})</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Then I handled styling by targeting only the classes with the <code>js-opacity</code> attached.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code><span class=\"nc\">.scroll-in.js-opacity</span> <span class=\"p\">{</span>\n  <span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This way the elements are only hidden if the script has actually loaded and since the landing page wasn't too heavy or making multiple calls, the script loads almost immediately.</p>\n\n<h3>\n  <a name=\"how-to-implement-multiple-color-themes\" href=\"#how-to-implement-multiple-color-themes\">\n  </a>\n  How to implement multiple color themes\n</h3>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BetYSIfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617174865543/E4WTP3Udi.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--BetYSIfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617174865543/E4WTP3Udi.png\" alt=\"color-schemes.png\" loading=\"lazy\"></a><br>\nThis was definitely the most fun feature to implement. </p>\n\n<p>The <a href=\"https://jemimaabu.github.io\">first version</a>  of my portfolio has a dark/light theme switch but I wanted something more interesting this time so I thought, why have two colors when you can have six. </p>\n\n<p>I implemented the multiple color theme feature using vanilla JavaScript and CSS.<br>\nThe best part is, thanks to the implementation, I could have gone on to have as many color themes as I wanted.</p>\n\n<p>This is the JavaScript code for handling theme switching:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">const</span> <span class=\"nx\">setTheme</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">className</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">root</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">html</span><span class=\"dl\">'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n  <span class=\"nx\">root</span><span class=\"p\">.</span><span class=\"nx\">className</span> <span class=\"o\">=</span> <span class=\"nx\">className</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>All we need to do is assign a className to the root element depending on what's selected. <br>\nThen the HTML looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;button</span> <span class=\"na\">onclick=</span><span class=\"s\">\"setTheme('light')\"</span> <span class=\"na\">aria-label=</span><span class=\"s\">\"Set light theme\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"na\">onclick=</span><span class=\"s\">\"setTheme('dark')\"</span> <span class=\"na\">aria-label=</span><span class=\"s\">\"Set dark theme\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/button&gt;</span>\n<span class=\"nt\">&lt;button</span> <span class=\"na\">onclick=</span><span class=\"s\">\"setTheme('brown')\"</span> <span class=\"na\">aria-label=</span><span class=\"s\">\"Set brown theme\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;/button&gt;</span>\n...\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And our CSS looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code><span class=\"nd\">:root</span><span class=\"o\">,</span>\n<span class=\"nd\">:root</span><span class=\"nc\">.light</span> <span class=\"p\">{</span>\n  <span class=\"py\">--background-color</span><span class=\"p\">:</span> <span class=\"m\">#fafafa</span><span class=\"p\">;</span>\n  <span class=\"py\">--text-color</span><span class=\"p\">:</span> <span class=\"m\">#000</span><span class=\"p\">;</span>\n  <span class=\"err\">...</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">:root</span><span class=\"nc\">.dark</span> <span class=\"p\">{</span>\n  <span class=\"py\">--background-color</span><span class=\"p\">:</span> <span class=\"m\">#0d1926</span><span class=\"p\">;</span>\n  <span class=\"py\">--text-color</span><span class=\"p\">:</span> <span class=\"m\">#f7fafc</span><span class=\"p\">;</span>\n  <span class=\"err\">...</span>\n<span class=\"p\">}</span>\n\n<span class=\"nd\">:root</span><span class=\"nc\">.brown</span> <span class=\"p\">{</span>\n  <span class=\"py\">--background-color</span><span class=\"p\">:</span> <span class=\"m\">#eeeae2</span><span class=\"p\">;</span>\n  <span class=\"py\">--text-color</span><span class=\"p\">:</span> <span class=\"m\">#120c07</span><span class=\"p\">;</span>\n  <span class=\"err\">...</span>\n<span class=\"p\">}</span>\n<span class=\"o\">...</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Finally, make sure you only assign colors to each element according to the CSS variable.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code><span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--background-color</span><span class=\"p\">);</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--text-color</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>An optional feature you can implement is setting a dark/light theme according to the user's system settings. We can do this using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\">prefers-color-scheme</a> media query.<br>\nWe just need to update our default root variables:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code><span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">prefers-color-scheme</span><span class=\"p\">:</span> <span class=\"n\">dark</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n<span class=\"c\">/* set new default root to same colors in root.dark */</span>\n  <span class=\"nd\">:root</span> <span class=\"p\">{</span>\n    <span class=\"py\">--background-color</span><span class=\"p\">:</span> <span class=\"m\">#0d1926</span><span class=\"p\">;</span>\n    <span class=\"py\">--text-color</span><span class=\"p\">:</span> <span class=\"m\">#f7fafc</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>That's pretty much the gist of the logic. You can see the complete implementation at my <a href=\"https://github.com/jemimaabu/portfolio\">portfolio repository</a>.</p>\n\n<h3>\n  <a name=\"3-deploying-the-site\" href=\"#3-deploying-the-site\">\n  </a>\n  3. Deploying the site\n</h3>\n\n<p>Once I had all my content and logic implemented, I added the repository to my Netlify site and connected it to my custom site. You can read about how I set up continuous deployment from Netlify (and more options for hosting and deploying your site) in the third article building my portfolio inspired: <a href=\"https://www.freecodecamp.org/news/beginners-guide-to-creating-a-portfolio-website/\">How to Create a Portfolio Website â A Beginner Developer's Guide</a> </p>\n\n<h3>\n  <a name=\"how-to-get-a-perfect-lighthouse-score-on-your-website\" href=\"#how-to-get-a-perfect-lighthouse-score-on-your-website\">\n  </a>\n  How To Get A Perfect Lighthouse Score on Your Website\n</h3>\n\n<p>You can test the scores of your website using the Lighthouse audit tool in DevTools. </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bnMxS7Eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617177408161/6Bed8iGXH.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--bnMxS7Eg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617177408161/6Bed8iGXH.png\" alt=\"lighthouse-tab.png\" loading=\"lazy\"></a></p>\n\n<p>It's a good idea to run Lighthouse in incognito mode to prevent extensions interfering with your score. It returns a report giving you a score according to how well you meet certain metrics and also tells you things you can fix. </p>\n\n<p>You can easily increase your score by taking note of the returned items and making those fixes accordingly.</p>\n\n<p>Here's how I ensured high scores in each category:</p>\n\n<h4>\n  <a name=\"accessibility\" href=\"#accessibility\">\n  </a>\n  Accessibility\n</h4>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--O2XLnfnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617181012954/F1UPY9OFt.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--O2XLnfnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617181012954/F1UPY9OFt.png\" alt=\"accessibility.png\" loading=\"lazy\"></a><br>\nIt's always best to ensure your site is as accessible as possible and not just for score-related reasons. You can watch my video on <a href=\"https://www.youtube.com/watch?v=QSXdTuD9Rak\">Understanding Accessibility As A Concept</a> for more information on that.</p>\n\n<p>These are some of the things I do to ensure accessibility on my site:</p>\n\n<ol>\n<li>Using an <a href=\"https://romeo.elsevier.com/accessibility_checklist/downloads/developer_designer_checklist.pdf\">accessibility checklist</a> </li>\n<li>Writing code with the <a href=\"https://marketplace.visualstudio.com/items?itemName=MaxvanderSchee.web-accessibility#overview\">Web Accessibility extension</a> in VSCode</li>\n<li>Using the appropriate aria-roles for custom elements</li>\n<li>Manually testing the site after building (tabbing through and checking that all elements get visible focus, mouse operable elements work with keyboards etc).</li>\n</ol>\n\n<p>You can also use the <a href=\"https://wave.webaim.org/\">WAVE tool</a> for further testing after building.</p>\n\n<h4>\n  <a name=\"perfomance\" href=\"#perfomance\">\n  </a>\n  Perfomance\n</h4>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--N4EFCOwL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617181021769/Z9hZWTNBM.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--N4EFCOwL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617181021769/Z9hZWTNBM.png\" alt=\"perfomance.png\" loading=\"lazy\"></a><br>\nThis definitely gave me the most headache but here's how I got a perfect performance score:</p>\n\n<ul>\n<li>Compressed all images and included an explicit width and height. \nThis is one of the most common contributing factors to decreased performance scores mostly cause it's a lot of stress to implement. I resized all my images to be the maximum width they'd be rendered on the page, around 720px and set explicit width and height and made them responsive with CSS.\n</li>\n</ul>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;img src=\"\" width=\"720\" height=\"340\" alt=\"\"&gt;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>img {\n  width: 100%;\n  height: auto;\n}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>I was able to do this because I served static images saved on my local folder so if you're calling your images from a CDN or somewhere else, look into the options they offer for rendering responsive images.</p>\n\n<ul>\n<li>I split all my code according to the pages calling them to make sure I wouldn't be loading unnecessary stylesheets or scripts. \nMy site was very CSS heavy so instead of calling one large CSS file, I split the files according to the pages that needed them.</li>\n</ul>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vwRhmlu9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617173904496/3zFDaN8kJ.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vwRhmlu9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617173904496/3zFDaN8kJ.png\" alt=\"file-structure.png\" loading=\"lazy\"></a></p>\n\n<ul>\n<li><p>Reduced page load animation.<br>\nChrome detects how long it takes for text to appear on your page and the timing can affect your performance score so try to keep your loading animation under 1s (one second). </p></li>\n<li><p>imported font using font-face instead of link. For some reason, Google Chrome marks downloading fonts from Google fonts as <a href=\"https://web.dev/render-blocking-resources/?utm_source=lighthouse&amp;utm_medium=devtools\">a render-blocking resource</a> which is odd to me cause like aren't y'all part of the same company? You fix it, what do you want me to do (I'm kidding lol. Mostly).</p></li>\n</ul>\n\n<h4>\n  <a name=\"seo-and-best-practices\" href=\"#seo-and-best-practices\">\n  </a>\n  SEO and Best Practices\n</h4>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--R9CsM8gd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617181043331/NBQNRfTGI.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--R9CsM8gd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617181043331/NBQNRfTGI.png\" alt=\"best-practices.png\" loading=\"lazy\"></a><br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pp9mGYDn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617181048609/F6vW3gElu.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--pp9mGYDn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617181048609/F6vW3gElu.png\" alt=\"seo.png\" loading=\"lazy\"></a></p>\n\n<p>SEO and Best Practices usually go hand in hand with performance and accessibility so as long as you have good scores there, they'll follow right along.<br>\nThe audit report tells you what needs to be updated so you can always fix any errors that pop up.</p>\n\n\n<hr>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>And that's how I build my perfect score portfolio website. Maybe you're wondering why does it matter to have a perfect score on your website?</p>\n\n<p>For bragging rights, obvy. Also, you get fireworks if you have a perfect score so that's always nice.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--v_yszJ0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617181220899/LCQ1LsKjw.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--v_yszJ0L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617181220899/LCQ1LsKjw.gif\" alt=\"lighthouse-fireworks.gif\" loading=\"lazy\"></a></p>\n\n<p>Seriously though, it's not the perfect score that matters, it's just the idea behind it. </p>\n\n<p>You should always be building your sites to be as accessible and performant as possible, according to best practices and the SEO is an added benefit. Lighthouse scores are just a way of measuring how well you've done that.</p>\n\n<p>Thanks for reading :) If you found this article helpful, let me know in the comments or on <a href=\"https://www.twitter.com/jemimaabu\">Twitter</a>.</p>\n\n","body_markdown":"In this article, we'll discuss how I implemented six different color themes, created interactive content that works with and without JavaScript and got a perfect lighthouse score on my website\ntags: portfolio, accessibility, performance, javascript\ncanonical_url: https://blog.jemimaabu.com/how-i-built-my-perfect-score-portfolio-website/\n//cover_image: https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u45t2h6p0i7vksirk1vg.png\n---\n\nI recently published the fourth version of my portfolio [jemimaabu.com](https://www.jemimaabu.com). \nWith this version, I tried to make the code as performant and accessible as possible but still have an interactive site, so this article will be about how I managed to achieve that. \n\n![portfolio-designs-tiny.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1617172505481/lkQXyI6sI.gif)\n\nThese are the following features in my portfolio that we'll be discussing:\n- Clear content and easy to navigate.\n- Built with HTML, CSS and JavaScript (no frameworks or libraries)\n- Works on JS-disabled browsers\n- Vanilla JavaScript implementation of smart navigation and animate on scroll\n- 6 different color themes\n- Perfect scores on accessibility, performance, best practices and SEO\n\nI shared the portfolio on Twitter once I was done and it [got a lot of feedback](https://twitter.com/Jemimaabu/status/1376830168334012422) and I also got messages from people asking about certain features so I decided to write this article to explain these features.\n\n## 1. Creating The Design\nIt took me about a month to come up with the design for my portfolio, mostly because I designed the entire thing on a trial and error basis - swapping out different layouts and colors till I liked how it looked. \n\nI also went around the internet looking at other people's portfolios for inspiration and using features that I liked.\n\nThese are some of the portfolios that I got inspiration from:\n-  [Usecue](https://www.usecue.com/) - perfect lighthouse score, call to action buttons for next and previous item\n- [RFarn](https://rfarn.com/) - large text loading screen, slightly fixed header on scroll to offset the [URL bar resizing](https://developers.google.com/web/updates/2016/12/url-bar-resizing) \n- [Webinsane](http://webinsane.com/) - brown color theme, the font 'Inter'\n- [HÃ¥vard Brynjulfsen](https://www.havardbrynjulfsen.com/) - vaporwave theme \n\n### Clear content\n\nA major reason I wanted to revamp my portfolio from [the previous version](https://v3.jemimaabu.com) was to have all my content on my site without overloading the landing page.\n\nI had different pages for each content and chose designs I felt would best present the information:\n- [About page](https://www.jemimaabu.com/about) - splitting sections into expandable details to reduce text appearance on page\n-  [Articles page](https://www.jemimaabu.com/articles)  - simple article title and description display according to how most blog posts are displayed\n-  [Talks page](https://www.jemimaabu.com/talks) - information set in responsive table (the table converts to a list on smaller screens)\n-  [Projects page](https://www.jemimaabu.com/projects)  - projects set in slider carousel so I could include as many projects without having a terribly long page.\n\nI also included selected parts of each content on the [landing page](https://www.jemimaabu.com)  along with a call-to-action button leading to each page to encourage user navigation.\n\n## 2. Writing the code\nEver since the [second version](http://v2.jemimaabu.com) of my portfolio, which was easily the least performant version of all versions, I've always built my portfolios from scratch with HTML and CSS, using as little JavaScript dependency as possible.\n\nI also try to avoid using frameworks or libraries so I can optimize my code for performance and accessibility.\n\n### Works on non-JS browsers\nA lot of interactions on the page are actually done with CSS or semantic HTML and not JavaScript, such as:\n- filter on Articles and [Presskit](https://www.jemimaabu.com/presskit) pages - [How to Build a Filtering Component in Pure CSS](https://webdesign.tutsplus.com/tutorials/how-to-build-a-filtering-component-in-pure-css--cms-33111)\n- slider carousel on Projects page - [CSS-Only Carousel](https://css-tricks.com/css-only-carousel/)\n- expandable content on About page using HTML details - [The Details disclosure element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details) \n\nThe benefit of this is that the site isn't dependent on JavaScript for displaying information so it still works without it.\n\n### Vanilla JS Implementation\nI used JavaScript to handle minor interactions on the page such as elements fading in on scroll, the smart navigation and handling multiple color themes. I also wrote two articles on how I did this:\n-  [How to Animate on Scroll With Vanilla JavaScript](https://webdesign.tutsplus.com/tutorials/animate-on-scroll-with-javascript--cms-36671) on Envato Tuts+ and,\n- [Creating a Smart Navbar With Vanilla JavaScript](https://css-tricks.com/creating-a-smart-navbar-with-vanilla-javascript/) on CSS-Tricks\n\nIn order to ensure that the content wasn't dependent on being displayed with JavaScript, I only implemented the effects on the elements once the JavaScript had loaded. For example, for the `scroll-in` element, my JavaScript code looked like this:\n\n```javascript\nscrollElements.forEach((el) => {\n  el.classList.add('js-opacity');\n})\n```\nThen I handled styling by targeting only the classes with the `js-opacity` attached.\n```css\n.scroll-in.js-opacity {\n  opacity: 0;\n}\n```\nThis way the elements are only hidden if the script has actually loaded and since the landing page wasn't too heavy or making multiple calls, the script loads almost immediately.\n\n### How to implement multiple color themes\n\n![color-schemes.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617174865543/E4WTP3Udi.png)\nThis was definitely the most fun feature to implement. \n\nThe [first version](https://jemimaabu.github.io)  of my portfolio has a dark/light theme switch but I wanted something more interesting this time so I thought, why have two colors when you can have six. \n\nI implemented the multiple color theme feature using vanilla JavaScript and CSS.\nThe best part is, thanks to the implementation, I could have gone on to have as many color themes as I wanted.\n\nThis is the JavaScript code for handling theme switching: \n\n```javascript\nconst setTheme = (className) => {\n  var root = document.getElementsByTagName('html')[0];\n  root.className = className;\n}\n```\nAll we need to do is assign a className to the root element depending on what's selected. \nThen the HTML looks like this:\n\n```html\n<button onclick=\"setTheme('light')\" aria-label=\"Set light theme\">\n</button>\n<button onclick=\"setTheme('dark')\" aria-label=\"Set dark theme\">\n</button>\n<button onclick=\"setTheme('brown')\" aria-label=\"Set brown theme\">\n</button>\n...\n```\nAnd our CSS looks like this:\n```css\n:root,\n:root.light {\n  --background-color: #fafafa;\n  --text-color: #000;\n  ...\n}\n\n:root.dark {\n  --background-color: #0d1926;\n  --text-color: #f7fafc;\n  ...\n}\n\n:root.brown {\n  --background-color: #eeeae2;\n  --text-color: #120c07;\n  ...\n}\n...\n```\nFinally, make sure you only assign colors to each element according to the CSS variable.\n\n```css\nbody {\n  background-color: var(--background-color);\n  color: var(--text-color);\n}\n```\n\nAn optional feature you can implement is setting a dark/light theme according to the user's system settings. We can do this using the [prefers-color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme) media query.\nWe just need to update our default root variables:\n\n```css\n@media (prefers-color-scheme: dark) {\n/* set new default root to same colors in root.dark */\n  :root {\n    --background-color: #0d1926;\n    --text-color: #f7fafc;\n  }\n}\n```\n\nThat's pretty much the gist of the logic. You can see the complete implementation at my [portfolio repository](https://github.com/jemimaabu/portfolio).\n\n### 3. Deploying the site\nOnce I had all my content and logic implemented, I added the repository to my Netlify site and connected it to my custom site. You can read about how I set up continuous deployment from Netlify (and more options for hosting and deploying your site) in the third article building my portfolio inspired: [How to Create a Portfolio Website â A Beginner Developer's Guide](https://www.freecodecamp.org/news/beginners-guide-to-creating-a-portfolio-website/) \n\n### How To Get A Perfect Lighthouse Score on Your Website\nYou can test the scores of your website using the Lighthouse audit tool in DevTools. \n\n![lighthouse-tab.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617177408161/6Bed8iGXH.png)\n\nIt's a good idea to run Lighthouse in incognito mode to prevent extensions interfering with your score. It returns a report giving you a score according to how well you meet certain metrics and also tells you things you can fix. \n\nYou can easily increase your score by taking note of the returned items and making those fixes accordingly.\n\nHere's how I ensured high scores in each category:\n\n#### Accessibility\n\n![accessibility.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617181012954/F1UPY9OFt.png)\nIt's always best to ensure your site is as accessible as possible and not just for score-related reasons. You can watch my video on [Understanding Accessibility As A Concept](https://www.youtube.com/watch?v=QSXdTuD9Rak) for more information on that.\n\nThese are some of the things I do to ensure accessibility on my site:\n1. Using an [accessibility checklist](https://romeo.elsevier.com/accessibility_checklist/downloads/developer_designer_checklist.pdf) \n2. Writing code with the [Web Accessibility extension](https://marketplace.visualstudio.com/items?itemName=MaxvanderSchee.web-accessibility#overview) in VSCode\n3. Using the appropriate aria-roles for custom elements\n4. Manually testing the site after building (tabbing through and checking that all elements get visible focus, mouse operable elements work with keyboards etc).\n\nYou can also use the [WAVE tool](https://wave.webaim.org/) for further testing after building.\n\n#### Perfomance\n\n![perfomance.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617181021769/Z9hZWTNBM.png)\nThis definitely gave me the most headache but here's how I got a perfect performance score:\n- Compressed all images and included an explicit width and height. \nThis is one of the most common contributing factors to decreased performance scores mostly cause it's a lot of stress to implement. I resized all my images to be the maximum width they'd be rendered on the page, around 720px and set explicit width and height and made them responsive with CSS.\n\n```\n<img src=\"\" width=\"720\" height=\"340\" alt=\"\">\n```\n```\nimg {\n  width: 100%;\n  height: auto;\n}\n```\n\nI was able to do this because I served static images saved on my local folder so if you're calling your images from a CDN or somewhere else, look into the options they offer for rendering responsive images.\n\n- I split all my code according to the pages calling them to make sure I wouldn't be loading unnecessary stylesheets or scripts. \nMy site was very CSS heavy so instead of calling one large CSS file, I split the files according to the pages that needed them.\n\n![file-structure.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617173904496/3zFDaN8kJ.png)\n\n- Reduced page load animation.\nChrome detects how long it takes for text to appear on your page and the timing can affect your performance score so try to keep your loading animation under 1s (one second). \n\n- imported font using font-face instead of link. For some reason, Google Chrome marks downloading fonts from Google fonts as [a render-blocking resource](https://web.dev/render-blocking-resources/?utm_source=lighthouse&utm_medium=devtools) which is odd to me cause like aren't y'all part of the same company? You fix it, what do you want me to do (I'm kidding lol. Mostly).\n\n#### SEO and Best Practices\n\n![best-practices.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617181043331/NBQNRfTGI.png)\n![seo.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1617181048609/F6vW3gElu.png)\n\nSEO and Best Practices usually go hand in hand with performance and accessibility so as long as you have good scores there, they'll follow right along.\nThe audit report tells you what needs to be updated so you can always fix any errors that pop up.\n\n---\n\n## Conclusion\n\nAnd that's how I build my perfect score portfolio website. Maybe you're wondering why does it matter to have a perfect score on your website?\n\nFor bragging rights, obvy. Also, you get fireworks if you have a perfect score so that's always nice.\n\n![lighthouse-fireworks.gif](https://cdn.hashnode.com/res/hashnode/image/upload/v1617181220899/LCQ1LsKjw.gif)\n\nSeriously though, it's not the perfect score that matters, it's just the idea behind it. \n\nYou should always be building your sites to be as accessible and performant as possible, according to best practices and the SEO is an added benefit. Lighthouse scores are just a way of measuring how well you've done that.\n\nThanks for reading :) If you found this article helpful, let me know in the comments or on [Twitter](https://www.twitter.com/jemimaabu).\n\n\n\n","user":{"name":"Jemima Abu","username":"jemimaabu","twitter_username":"Jemimaabu","github_username":"jemimaabu","website_url":"https://www.jemimaabu.com","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--gTDF4LUd--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/121416/b1bb7c72-d1f8-40a3-a484-baf01c44e461.JPG","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--7yHytG_i--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/121416/b1bb7c72-d1f8-40a3-a484-baf01c44e461.JPG"},"readingTime":"9 min read"}},"__N_SSG":true}