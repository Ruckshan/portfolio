{"pageProps":{"post":{"type_of":"article","id":638241,"title":"Solution: Wiggle Subsequence","description":"This is part of a series of Leetcode solution explanations (index). If you liked this solution or fou...","readable_publish_date":"Mar 18","slug":"solution-wiggle-subsequence-3e65","path":"/seanpgallivan/solution-wiggle-subsequence-3e65","url":"https://dev.to/seanpgallivan/solution-wiggle-subsequence-3e65","comments_count":0,"public_reactions_count":7,"collection_id":11116,"published_timestamp":"2021-03-18T08:48:18Z","positive_reactions_count":7,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--WoGVxWNz--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3sg4p3konko1jwfxaxso.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--JZhrtwHp--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3sg4p3konko1jwfxaxso.png","canonical_url":"https://dev.to/seanpgallivan/solution-wiggle-subsequence-3e65","created_at":"2021-03-18T08:48:18Z","edited_at":null,"crossposted_at":null,"published_at":"2021-03-18T08:48:18Z","last_comment_at":"2021-03-18T08:48:18Z","reading_time_minutes":3,"tag_list":["algorithms","javascript","java","python"],"tags":["algorithms","javascript","java","python"],"body_html":"<p><em>This is part of a series of Leetcode solution explanations (<a href=\"https://dev.to/seanpgallivan/leetcode-solutions-index-57fl\">index</a>). If you liked this solution or found it useful,</em> <strong><em>please like</em></strong> <em>this post and/or</em> <strong><em>upvote</em></strong> <em><a href=\"https://leetcode.com/problems/wiggle-subsequence/discuss/1115231\">my solution post on Leetcode's forums</a>.</em></p>\n\n\n<hr>\n\n<h4>\n  <a name=\"leetcode-problem-376-medium-wiggle-subsequence\" href=\"#leetcode-problem-376-medium-wiggle-subsequence\" class=\"anchor\">\n  </a>\n  <a href=\"https://leetcode.com/problems/wiggle-subsequence/\">Leetcode Problem #376 (<em>Medium</em>): Wiggle Subsequence</a>\n</h4>\n\n\n<hr>\n\n<h4>\n  <a name=\"description\" href=\"#description\" class=\"anchor\">\n  </a>\n  <strong><em>Description:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#idea\"><em>Solution Idea</em></a> || <em>Code</em>: <a href=\"#javascript-code\"><em>JavaScript</em></a> | <a href=\"#python-code\"><em>Python</em></a> | <a href=\"#java-code\"><em>Java</em></a> | <a href=\"#c-code\"><em>C++</em></a>)</p>\n\n<blockquote>\n<p>Given an integer array <code>nums</code>, return the length of the longest <strong>wiggle sequence</strong>.</p>\n\n<p>A <strong>wiggle sequence</strong> is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.</p>\n\n<ul>\n<li> For example, <code>[1, 7, 4, 9, 2, 5]</code> is a <strong>wiggle sequence</strong> because the differences <code>(6, -3, 5, -7, 3)</code> are alternately positive and negative.</li>\n<li> In contrast, <code>[1, 4, 7, 2, 5]</code> and <code>[1, 7, 4, 5, 5]</code> are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.</li>\n</ul>\n\n<p>A <strong>subsequence</strong> is obtained by deleting some elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.</p>\n</blockquote>\n\n\n<hr>\n\n<h4>\n  <a name=\"examples\" href=\"#examples\" class=\"anchor\">\n  </a>\n  <strong><em>Examples:</em></strong>\n</h4>\n\n<blockquote>\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Example 1:</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input:</td>\n<td>nums = [1,7,4,9,2,5]</td>\n</tr>\n<tr>\n<td>Output:</td>\n<td>6</td>\n</tr>\n<tr>\n<td>Explanation:</td>\n<td>The entire sequence is a wiggle sequence.</td>\n</tr>\n</tbody>\n</table></div>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Example 2:</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input:</td>\n<td>nums = [1,17,5,10,13,15,10,5,16,8]</td>\n</tr>\n<tr>\n<td>Output:</td>\n<td>7</td>\n</tr>\n<tr>\n<td>Explanation:</td>\n<td>There are several subsequences that achieve this length.<br>One is [1,17,10,13,10,16,8].</td>\n</tr>\n</tbody>\n</table></div>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Example 3:</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input:</td>\n<td>nums = [1,2,3,4,5,6,7,8,9]</td>\n</tr>\n<tr>\n<td>Output:</td>\n<td>2</td>\n</tr>\n</tbody>\n</table></div>\n</blockquote>\n\n\n<hr>\n\n<h4>\n  <a name=\"constraints\" href=\"#constraints\" class=\"anchor\">\n  </a>\n  <strong><em>Constraints:</em></strong>\n</h4>\n\n<blockquote>\n<ul>\n<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n</blockquote>\n\n\n<hr>\n\n<h4>\n  <a name=\"idea\" href=\"#idea\" class=\"anchor\">\n  </a>\n  <strong><em>Idea:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#description\"><em>Problem Description</em></a> || <em>Code</em>: <a href=\"#javascript-code\"><em>JavaScript</em></a> | <a href=\"#python-code\"><em>Python</em></a> | <a href=\"#java-code\"><em>Java</em></a> | <a href=\"#c-code\"><em>C++</em></a>)</p>\n\n<p>The key realization here is that any number that lies in the middle of a stretch of the same direction is extraneous, because the more extreme numbers are the better choices to keep, as they allow for a larger likelihood that a subsequent number will be a directional change.</p>\n\n<p>So the simple answer here is to count the inflection points in our input array (<strong>N</strong>) where the direction changes. There are several ways to do this, but in this solution, we can keep a directional flag (<strong>up</strong>) to keep track of the current direction and then increment our answer (<strong>ans</strong>) and invert <strong>up</strong> when a change is found.</p>\n\n<p>One tricky thing lies in setting the initial direction. Per the instructions, the first number can represent any direction, so we'll have to wait until the first time we see a different number to set our direction. We can check this with a simple <strong>while</strong> loop before the main loop.</p>\n\n<p>Once we finish, we can <strong>return ans</strong>.</p>\n\n\n<hr>\n\n<h4>\n  <a name=\"implementation\" href=\"#implementation\" class=\"anchor\">\n  </a>\n  <strong><em>Implementation:</em></strong>\n</h4>\n\n<p>All but Javascript will require an additional check before the main loop to account for an input array with all the same number.</p>\n\n\n<hr>\n\n<h4>\n  <a name=\"javascript-code\" href=\"#javascript-code\" class=\"anchor\">\n  </a>\n  <strong><em>Javascript Code:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#description\"><em>Problem Description</em></a> || <a href=\"#idea\"><em>Solution Idea</em></a>)<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">wiggleMaxLength</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">N</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">N</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"nx\">N</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"nx\">i</span><span class=\"o\">++</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">up</span> <span class=\"o\">=</span> <span class=\"nx\">N</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"nx\">N</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">],</span> <span class=\"nx\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">up</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">N</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"nx\">N</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">up</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">N</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"nx\">N</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n            <span class=\"nx\">up</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"nx\">up</span><span class=\"p\">,</span> <span class=\"nx\">ans</span><span class=\"o\">++</span>\n    <span class=\"k\">return</span> <span class=\"nx\">ans</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h4>\n  <a name=\"python-code\" href=\"#python-code\" class=\"anchor\">\n  </a>\n  <strong><em>Python Code:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#description\"><em>Problem Description</em></a> || <a href=\"#idea\"><em>Solution Idea</em></a>)<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">wiggleMaxLength</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"n\">lenN</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">),</span> <span class=\"mi\">1</span>\n        <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">lenN</span> <span class=\"ow\">and</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">lenN</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"mi\">1</span>\n        <span class=\"n\">up</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"mi\">1</span>\n        <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">lenN</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">up</span> <span class=\"ow\">and</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">up</span> <span class=\"ow\">and</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]):</span>\n                <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">up</span>\n                <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h4>\n  <a name=\"java-code\" href=\"#java-code\" class=\"anchor\">\n  </a>\n  <strong><em>Java Code:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#description\"><em>Problem Description</em></a> || <a href=\"#idea\"><em>Solution Idea</em></a>)<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight java\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">wiggleMaxLength</span><span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"no\">N</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"no\">N</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span> <span class=\"o\">&amp;&amp;</span> <span class=\"no\">N</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"no\">N</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"n\">i</span><span class=\"o\">++;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">len</span><span class=\"o\">)</span> <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"no\">N</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"no\">N</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">];</span>\n        <span class=\"k\">for</span> <span class=\"o\">(;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span>\n            <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">up</span> <span class=\"o\">&amp;&amp;</span> <span class=\"no\">N</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&lt;</span> <span class=\"no\">N</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">||</span> <span class=\"o\">(!</span><span class=\"n\">up</span> <span class=\"o\">&amp;&amp;</span> <span class=\"no\">N</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">&gt;</span> <span class=\"no\">N</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">]))</span> <span class=\"o\">{</span>\n                <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"n\">up</span><span class=\"o\">;</span>\n                <span class=\"n\">ans</span><span class=\"o\">++;</span>\n            <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h4>\n  <a name=\"c-code\" href=\"#c-code\" class=\"anchor\">\n  </a>\n  <strong><em>C++ Code:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#description\"><em>Problem Description</em></a> || <a href=\"#idea\"><em>Solution Idea</em></a>)<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight cpp\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">wiggleMaxLength</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">N</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(),</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">len</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n        <span class=\"kt\">bool</span> <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span>\n        <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">up</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">up</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">N</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n                <span class=\"n\">up</span> <span class=\"o\">=</span> <span class=\"o\">!</span><span class=\"n\">up</span><span class=\"p\">,</span> <span class=\"n\">ans</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n","body_markdown":"This is part of a series of Leetcode solution explanations ([index](https://dev.to/seanpgallivan/leetcode-solutions-index-57fl)). If you liked this solution or found it useful,* ***please like*** *this post and/or* ***upvote*** *[my solution post on Leetcode's forums](https://leetcode.com/problems/wiggle-subsequence/discuss/1115231).*\n\n---\n\n#### [Leetcode Problem #376 (*Medium*): Wiggle Subsequence](https://leetcode.com/problems/wiggle-subsequence/)\n\n---\n\n#### ***Description:***\n\n<br />(*Jump to*: [*Solution Idea*](#idea) || *Code*: [*JavaScript*](#javascript-code) | [*Python*](#python-code) | [*Java*](#java-code) | [*C++*](#c-code))\n\n>\nGiven an integer array `nums`, return the length of the longest **wiggle sequence**.\n>\nA **wiggle sequence** is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.\n  -  For example, `[1, 7, 4, 9, 2, 5]` is a **wiggle sequence** because the differences `(6, -3, 5, -7, 3)` are alternately positive and negative.\n  -  In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.\n>\nA **subsequence** is obtained by deleting some elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.\n\n---\n\n#### ***Examples:***\n>\nExample 1:||\n|---:|---|\nInput:|nums = [1,7,4,9,2,5]\nOutput:|6\nExplanation:|The entire sequence is a wiggle sequence.\n>\nExample 2:||\n|---:|---|\nInput:|nums = [1,17,5,10,13,15,10,5,16,8]\nOutput:|7\nExplanation:|There are several subsequences that achieve this length.<br>One is [1,17,10,13,10,16,8].\n>\nExample 3:||\n|---:|---|\nInput:|nums = [1,2,3,4,5,6,7,8,9]\nOutput:|2\n\n---\n\n#### ***Constraints:***\n>\n - `1 <= nums.length <= 1000`\n - `0 <= nums[i] <= 1000`\n\n---\n\n#### ***Idea:***\n\n<br />(*Jump to*: [*Problem Description*](#description) || *Code*: [*JavaScript*](#javascript-code) | [*Python*](#python-code) | [*Java*](#java-code) | [*C++*](#c-code))\n\nThe key realization here is that any number that lies in the middle of a stretch of the same direction is extraneous, because the more extreme numbers are the better choices to keep, as they allow for a larger likelihood that a subsequent number will be a directional change.\n\nSo the simple answer here is to count the inflection points in our input array (**N**) where the direction changes. There are several ways to do this, but in this solution, we can keep a directional flag (**up**) to keep track of the current direction and then increment our answer (**ans**) and invert **up** when a change is found.\n\nOne tricky thing lies in setting the initial direction. Per the instructions, the first number can represent any direction, so we'll have to wait until the first time we see a different number to set our direction. We can check this with a simple **while** loop before the main loop.\n\nOnce we finish, we can **return ans**.\n\n---\n\n#### ***Implementation:***\n\nAll but Javascript will require an additional check before the main loop to account for an input array with all the same number.\n\n---\n\n#### ***Javascript Code:***\n<br />(*Jump to*: [*Problem Description*](#description) || [*Solution Idea*](#idea))\n```javascript\nvar wiggleMaxLength = function(N) {\n    let len = N.length, i = 1\n    while (N[i] === N[i-1]) i++\n    let up = N[i-1] > N[i], ans = 1\n    for (; i < len; i++)\n        if ((up && N[i] < N[i-1]) || (!up && N[i] > N[i-1]))\n            up = !up, ans++\n    return ans\n};\n```\n\n---\n\n#### ***Python Code:***\n<br />(*Jump to*: [*Problem Description*](#description) || [*Solution Idea*](#idea))\n```python\nclass Solution:\n    def wiggleMaxLength(self, N: List[int]) -> int:\n        lenN, i = len(N), 1\n        while i < lenN and N[i] == N[i-1]: i += 1\n        if i == lenN: return 1\n        up, ans = N[i-1] > N[i], 1\n        while i < lenN:\n            if (up and N[i] < N[i-1]) or (not up and N[i] > N[i-1]):\n                up = not up\n                ans += 1\n            i += 1\n        return ans\n```\n\n---\n\n#### ***Java Code:***\n<br />(*Jump to*: [*Problem Description*](#description) || [*Solution Idea*](#idea))\n```java\nclass Solution {\n    public int wiggleMaxLength(int[] N) {\n        int len = N.length, i = 1, ans = 1;\n        while (i < len && N[i] == N[i-1]) i++;\n        if (i == len) return 1;\n        boolean up = N[i-1] > N[i];\n        for (; i < len; i++)\n            if ((up && N[i] < N[i-1]) || (!up && N[i] > N[i-1])) {\n                up = !up;\n                ans++;\n            }\n        return ans;\n    }\n}\n```\n\n---\n\n#### ***C++ Code:***\n<br />(*Jump to*: [*Problem Description*](#description) || [*Solution Idea*](#idea))\n```c++\nclass Solution {\npublic:\n    int wiggleMaxLength(vector<int>& N) {\n        int len = N.size(), i = 1, ans = 1;\n        while (i < len && N[i] == N[i-1]) i++;\n        if (i == len) return 1;\n        bool up = N[i-1] > N[i];\n        for (; i < len; i++)\n            if ((up && N[i] < N[i-1]) || (!up && N[i] > N[i-1]))\n                up = !up, ans++;\n        return ans;\n    }\n};\n```","user":{"name":"seanpgallivan","username":"seanpgallivan","twitter_username":null,"github_username":"seanpgallivan","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--crelugx6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/294302/b8052502-9903-46e2-a6f3-ba477c85de69.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Kcu5py0m--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/294302/b8052502-9903-46e2-a6f3-ba477c85de69.jpg"},"readingTime":"4 min read"}},"__N_SSG":true}