{"pageProps":{"post":{"type_of":"article","id":647702,"title":"Implementing the heart of clox's VM","description":"Halfway through Chapter 2 of Crafting Interpreters. We are implementing a VM to \"execute\" the instruc...","readable_publish_date":"Mar 27","slug":"implementing-a-vm-to-execute-the-instructions-3jcp","path":"/rj722/implementing-a-vm-to-execute-the-instructions-3jcp","url":"https://dev.to/rj722/implementing-a-vm-to-execute-the-instructions-3jcp","comments_count":0,"public_reactions_count":7,"collection_id":11863,"published_timestamp":"2021-03-27T22:13:38Z","positive_reactions_count":7,"cover_image":null,"social_image":"https://dev.to/social_previews/article/647702.png","canonical_url":"https://dev.to/rj722/implementing-a-vm-to-execute-the-instructions-3jcp","created_at":"2021-03-27T22:13:38Z","edited_at":"2021-03-29T00:13:36Z","crossposted_at":null,"published_at":"2021-03-27T22:13:38Z","last_comment_at":"2021-03-27T22:13:38Z","reading_time_minutes":2,"tag_list":["100daysofcs","computerscience","c"],"tags":["100daysofcs","computerscience","c"],"body_html":"<p>Halfway through Chapter 2 of Crafting Interpreters. We are implementing a VM to \"execute\" the instructions we had managed to store in chunks in the last post.</p>\n\n<p>So far, we've added an <code>interpret</code> method, which initializes the Instruction Pointer (a pointer which always points to the next instruction to execute) and calls a <code>run</code> method, which just keeps iterating over the <code>vm.chunk</code> which consists of  opcodes and their operands, and runs corresponding C code. It looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight c\"><code><span class=\"n\">InterpretResult</span> <span class=\"nf\">run</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"cp\">#define READ_BYTE() (*vm.ip++)\n</span>    <span class=\"cp\">#define READ_CONSTANT() (vm.chunk-&gt;constants.values[READ_BYTE()])\n</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;;)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">uint8_t</span> <span class=\"n\">instruction</span> <span class=\"o\">=</span> <span class=\"n\">READ_BYTE</span><span class=\"p\">();</span>\n        <span class=\"cp\">#ifdef DEBUG_TRACE_EXECUTION\n</span>            <span class=\"n\">disassembleInstruction</span><span class=\"p\">(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">chunk</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">int</span><span class=\"p\">)(</span><span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">ip</span> <span class=\"o\">-</span> <span class=\"n\">vm</span><span class=\"p\">.</span><span class=\"n\">chunk</span><span class=\"o\">-&gt;</span><span class=\"n\">code</span><span class=\"p\">));</span>\n        <span class=\"cp\">#endif\n</span>        <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">instruction</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"n\">OP_RETURN</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">INTERPRET_OK</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">case</span> <span class=\"n\">OP_CONSTANT</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"n\">Value</span> <span class=\"n\">constant</span> <span class=\"o\">=</span> <span class=\"n\">READ_CONSTANT</span><span class=\"p\">();</span>\n                <span class=\"c1\">// For now, let's just print the value</span>\n                <span class=\"n\">printValue</span><span class=\"p\">(</span><span class=\"n\">constant</span><span class=\"p\">);</span>\n                <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n                <span class=\"k\">break</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"cp\">#undef READ_CONSTANT\n</span>    <span class=\"cp\">#undef READ_BYTE\n</span><span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Not a whole lot useful, you'd say but hey, we don't have any supporting infrastructure right now. Bob tells me that this is the heart of the interpreter we are building and it will spend some 90% of its time here.</p>\n\n<p>For the same \"program\" we embedded in <a href=\"https://dev.to/rj722/laying-down-ground-work-for-a-bytecode-virtual-machine-5614\">our last post</a>, this outputs:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>== Test Chunk ==\n0000  122 OP_CONSANT          0 '1.2'\n0002  123 OP_CONSANT          1 '456'\n0004    | OP_RETURN\n1.2\n456\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Here on, I see that we're going to build a stack -- for holding values of local variables? perhaps. Let's find out!</p>\n\n\n<hr>\n\n<p>Housekeeping announcement: I'm not really enjoying writing daily posts. Way too less time to cram the interesting, juicy  stuff. The entire point of this was to learn CS every day, I added daily posts to keep myself accountable. I'll still be pushing a bullet-point-style log every day, and push interesting long form posts only when I have something interesting to write about.</p>\n\n","body_markdown":"Halfway through Chapter 2 of Crafting Interpreters. We are implementing a VM to \"execute\" the instructions we had managed to store in chunks in the last post.\n\nSo far, we've added an `interpret` method, which initializes the Instruction Pointer (a pointer which always points to the next instruction to execute) and calls a `run` method, which just keeps iterating over the `vm.chunk` which consists of  opcodes and their operands, and runs corresponding C code. It looks like this:\n\n```c\nInterpretResult run() {\n    #define READ_BYTE() (*vm.ip++)\n    #define READ_CONSTANT() (vm.chunk->constants.values[READ_BYTE()])\n\n    for (;;) {\n        uint8_t instruction = READ_BYTE();\n        #ifdef DEBUG_TRACE_EXECUTION\n            disassembleInstruction(vm.chunk, (int)(vm.ip - vm.chunk->code));\n        #endif\n        switch (instruction) {\n            case OP_RETURN: {\n                return INTERPRET_OK;\n            }\n            case OP_CONSTANT: {\n                Value constant = READ_CONSTANT();\n                // For now, let's just print the value\n                printValue(constant);\n                printf(\"\\n\");\n                break;\n            }\n        }\n    }\n    #undef READ_CONSTANT\n    #undef READ_BYTE\n}\n```\n\nNot a whole lot useful, you'd say but hey, we don't have any supporting infrastructure right now. Bob tells me that this is the heart of the interpreter we are building and it will spend some 90% of its time here.\n\nFor the same \"program\" we embedded in [our last post](https://dev.to/rj722/laying-down-ground-work-for-a-bytecode-virtual-machine-5614), this outputs:\n\n```\n== Test Chunk ==\n0000  122 OP_CONSANT          0 '1.2'\n0002  123 OP_CONSANT          1 '456'\n0004    | OP_RETURN\n1.2\n456\n```\n\nHere on, I see that we're going to build a stack -- for holding values of local variables? perhaps. Let's find out!\n\n---\n\nHousekeeping announcement: I'm not really enjoying writing daily posts. Way too less time to cram the interesting, juicy  stuff. The entire point of this was to learn CS every day, I added daily posts to keep myself accountable. I'll still be pushing a bullet-point-style log every day, and push interesting long form posts only when I have something interesting to write about.","user":{"name":"Rahul Jha","username":"rj722","twitter_username":"antisemantic","github_username":"RJ722","website_url":"https://rj722.github.io","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--rEHjUIML--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/26365/1256fde0-6c15-4725-881e-7cb7f3d74d1b.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--RWInufN8--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/26365/1256fde0-6c15-4725-881e-7cb7f3d74d1b.png"},"readingTime":"2 min read"}},"__N_SSG":true}