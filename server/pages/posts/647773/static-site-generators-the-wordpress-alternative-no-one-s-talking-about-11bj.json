{"pageProps":{"post":{"type_of":"article","id":647773,"title":"Static Site Generators - the WordPress alternative no one's talking about","description":"We've all experienced it.  Websites suddenly becoming slow for no reason, loading times in the double...","readable_publish_date":"Mar 28","slug":"static-site-generators-the-wordpress-alternative-no-one-s-talking-about-11bj","path":"/darrendube/static-site-generators-the-wordpress-alternative-no-one-s-talking-about-11bj","url":"https://dev.to/darrendube/static-site-generators-the-wordpress-alternative-no-one-s-talking-about-11bj","comments_count":39,"public_reactions_count":199,"collection_id":null,"published_timestamp":"2021-03-28T00:33:43Z","positive_reactions_count":199,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--lt9ifR4m--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vq0y91saltfd9thxu6i.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--VtQy_fE2--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vq0y91saltfd9thxu6i.png","canonical_url":"https://darrendube.com/blog/web-development/static-site-generators-wordpress-alternative","created_at":"2021-03-28T00:33:43Z","edited_at":"2021-04-03T14:18:51Z","crossposted_at":null,"published_at":"2021-03-28T00:33:43Z","last_comment_at":"2021-04-27T18:49:37Z","reading_time_minutes":8,"tag_list":[],"tags":[],"body_html":"<p>We've all experienced it.</p>\n\n<p>Websites suddenly becoming slow for no reason, loading times in the double digits, or even the dreaded <em>\"Error establishing a database connection\"</em>. It may come down to the hosting provider you are using, the size of your website, or even the complexity of your aesthetic design, but the crux of the matter is that:</p>\n\n<p><strong>WordPress is ageing.</strong></p>\n\n<p>Running on code first written in 2003, it was designed for a time in the evolution of the internet when waiting minutes for a website to load was not uncommon. We weren't as dependent on the internet then. But now? As a tech generation becomes more and more impatient, website loading times are becoming a crucial factor in the design process of a website, even being <a href=\"https://www.searchenginejournal.com/google-the-web-is-faster-since-page-speed-became-a-ranking-factor/301847/\">factored in by search engines when ranking</a>.</p>\n\n<p>So what's the solution to this problem? <strong>Static Site Generators!</strong> (surprise, surprise).</p>\n\n<p>But to understand how SSGs work and how they solve WordPress' problems, we first need to understand how WordPress works, and why this is causing slow websites.</p>\n\n<h2>\n  <a name=\"how-wordpress-works\" href=\"#how-wordpress-works\">\n  </a>\n  How WordPress Works\n</h2>\n\n<p>A typical, barebones website consists of HTML (for the content and structure), CSS (for the design), and JS (for any logic or processing). For anyone starting out in Web Development, the normal inclination would be to write a separate HTML file for every page on your website. We would call this a <strong>static website</strong>.</p>\n\n<p>Simple enough: you get easy customisation, no complex scripts to slow your site down, and a compact website that doesn't take up much space. Sure, this works for a simple website with 5 pages. But what about a blog with 50 posts? Or an e-commerce website with hundreds of products? I'm sure you can see where I'm going with this. With all these examples, sure, you can copy and paste a blog post template and edit the contents each time you want to write a new blog post, but that's taking away precious time. Time you could be spending writing blog posts.</p>\n\n<p>WordPress solves this problem by (and I'm massively oversimplifying here) storing page and blog post data in a database, separate from the styles. When a user visits a page on the website, WordPress executes PHP code, retrieving data from a database, and assembling this data into HTML and CSS. This is an example of what we call a <strong>dynamic website</strong>.</p>\n\n<p>All this code has to execute before the website has been rendered, while the user is waiting for the page to load, in a context where <a href=\"https://www.entrepreneur.com/article/281986\">40% of people will abandon a website that takes more than 3 seconds to load</a>.</p>\n\n<p>An optimised WordPress website with the best hosting and minimal assets will take about 1-2 seconds to load. But a website with cheap, low-cost hosting (the type most of us bloggers/portfolio owners will probably use) will take about 4-5 seconds!</p>\n\n<h2>\n  <a name=\"static-site-generators\" href=\"#static-site-generators\">\n  </a>\n  Static Site Generators\n</h2>\n\n<p>Now, instead of retrieving data from a database and assembling HTML and CSS each time a website loads, imagine if we just prebuilt this HTML and CSS <em>before</em> the user visited the website, and stored this instead. Instead of executing code, we deliver these files as-is when a person visits our site. This processing happens before the user visits the site, meaning the files are ready to be served as soon as a request is made.</p>\n\n<p>Think of an SSG as an application that inputs website data and outputs a folder with all the HTML, CSS, and assets.</p>\n\n<p>Therefore, while with WordPress we speak of load time, with Static Site Generators, this becomes almost negligible, and we shift our focus to <a href=\"https://css-tricks.com/comparing-static-site-generator-build-times/\">build time</a>.</p>\n\n<p>Static Site Generators are relatively new - below is the growth in popularity of the search term <em>\"Static Site Generator\"</em>:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--k2NctR_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/QnKkvyt/ssg-search-trend.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--k2NctR_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/QnKkvyt/ssg-search-trend.png\" alt=\"Google Trends for 'Static Site Generator'\" loading=\"lazy\"></a></p>\n\n<h3>\n  <a name=\"pros\" href=\"#pros\">\n  </a>\n  PROS\n</h3>\n\n<h4>\n  <a name=\"performance\" href=\"#performance\">\n  </a>\n  Performance\n</h4>\n\n<p>Because Static Site Generators prebuild websites <em>before</em> they are requested by users, load times are cut from several seconds to mere milliseconds!</p>\n\n<p>In-site navigation is also unbelievably fast. In fact, navigating from one page to another is almost instantaneous (Try it <a href=\"https://darrendube.com/\">now</a>! This website is powered by an SSG). This is because the SSG I use (<a href=\"https://gatsbyjs.com/\">GatsbyJS</a>) prefetches the files and assets of other pages on the website so that by the time you want to go to another page, it has everything ready!</p>\n\n<h4>\n  <a name=\"security\" href=\"#security\">\n  </a>\n  Security\n</h4>\n\n<p>Databases, servers, and outdated software running on them are a hacker's dream. <a href=\"https://www.wpwhitesecurity.com/statistics-70-percent-wordpress-installations-vulnerable/\">A study</a> found that about 70% of WordPress websites had a security vulnerability!</p>\n\n<p>The reason is simple - the more servers involved and the more processes and executions done by a server, the more loopholes and vulnerabilities can be found.</p>\n\n<p>But by preloading our pages, we eliminate the need for any logic and work to be performed, thereby eliminating the risk of hackers injecting malicious code into these processes.</p>\n\n<h4>\n  <a name=\"cost\" href=\"#cost\">\n  </a>\n  Cost\n</h4>\n\n<p>To run a self-hosted WordPress website, you need to spend on average $5-10 a month on hosting plus about $10 annually for a domain. All in all, you could easily spend over $100 a year. With Static Site Generators, this goes down to $0 (or \\$10 a year for a custom domain).</p>\n\n<p>Because no processing power is needed, you can host your website on free hosting providers like <a href=\"https://netlify.com/\">Netlify</a> and <a href=\"https://pages.github.com/\">GitHub Pages</a>.</p>\n\n<h4>\n  <a name=\"version-control\" href=\"#version-control\">\n  </a>\n  Version Control\n</h4>\n\n<p>Most Static Site Generator websites are published by pushing code to a remote git repository, where it is automatically built and deployed. Apart from making the deployment process easy, this makes it easy to revert to a previous version of your site should the need arise.</p>\n\n<p>But, as with anything, Static Site Generators also have some:</p>\n\n<h3>\n  <a name=\"cons\" href=\"#cons\">\n  </a>\n  CONS\n</h3>\n\n<h4>\n  <a name=\"pretty-steep-learning-curve\" href=\"#pretty-steep-learning-curve\">\n  </a>\n  Pretty steep learning curve\n</h4>\n\n<p>(Unless you are already a programmer).</p>\n\n<p>One of the reasons WordPress is so popular is its relatively shallow learning curve. You get a GUI, a dashboard, and a text editor - literally everything short of a WYSIWYG editor.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vVF_OiUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.wpexplorer.com/wp-content/uploads/wordpress-dashboard-guide-main-dashboard-widgets.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vVF_OiUu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.wpexplorer.com/wp-content/uploads/wordpress-dashboard-guide-main-dashboard-widgets.jpg\" alt=\"A WordPress Dashboard\" loading=\"lazy\"></a></p>\n\n<p>Static Site Generators require writing content in Markdown - not very intuitive for the average person.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5u2YiWQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5476205/32066320-35850040-ba34-11e7-8175-4d58f9735010.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5u2YiWQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/5476205/32066320-35850040-ba34-11e7-8175-4d58f9735010.png\" alt=\"Writing in Markdown\" loading=\"lazy\"></a></p>\n\n<p>Add to this their relatively small community compared to WordPress, and this makes the learning curve that much steeper.</p>\n\n<h4>\n  <a name=\"no-builtin-commenting\" href=\"#no-builtin-commenting\">\n  </a>\n  No built-in commenting\n</h4>\n\n<p>One of the many side-effects of not running on a server is that you don't get any services out of the box that require processing. That means comments, search, and most forms of contact forms will need third party services. A popular free third-party commenting service is <a href=\"https://disqus.com/\">Disqus</a>.</p>\n\n<h4>\n  <a name=\"updating-and-publishing-the-site-requires-tools-on-your-computer\" href=\"#updating-and-publishing-the-site-requires-tools-on-your-computer\">\n  </a>\n  Updating and Publishing the site requires tools on your computer\n</h4>\n\n<p>This means that you can only update your website from a computer that has that particular Static Site Generator installed - plus other dependencies. A WordPress site, however, can be edited from any computer with a browser and an internet connection.</p>\n\n<h2>\n  <a name=\"common-static-site-generators-out-there\" href=\"#common-static-site-generators-out-there\">\n  </a>\n  Common Static Site Generators out there\n</h2>\n\n<ol>\n<li>\n<p><strong><a href=\"https://gatsbyjs.com/\">Gatsby</a></strong></p>\n\n<p>Based on react and running on Javascript, GatsbyJS is very easy to transition to for existing web-developers who have already been working with Javascript. What makes it a popular choice is that it can be used to make <a href=\"https://web.dev/progressive-web-apps/\">Progressive Web Apps (PWAs)</a>, and its websites are designed to be very fast for users. The <a href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-image\">gatsby-plugin-image</a> plugin (and its predecessor, <a href=\"https://www.gatsbyjs.com/plugins/gatsby-image/\">gatsby-image</a>) give GatsbyJS image-optimisation out of the box, with features such as resizing, blurring, and preoptimisation. GatsbyJS also has a very rich ecosystem with clear and comprehensive <a href=\"https://www.gatsbyjs.com/docs/\">documentation</a>, and a fast growing community on GitHub. This all helps make GatsbyJS sites (like <a href=\"https://darrendube.com/\">this one</a>) faster for users than websites made by other Static Site Generators.</p>\n\n<p>Examples of websites powered by GatsbyJS are: <a href=\"https://airbnb.io/\">Airbnb's Engineering and Data Science website</a>, <a href=\"https://figma.com/\">Figma</a>, <a href=\"https://reactjs.org\">ReactJS</a>, <a href=\"https://hopper.com\">Hopper</a>.</p>\n\n<p>To <strong>get started</strong> with GatsbyJS, head to <a href=\"https://www.sitepoint.com/gatsby-guide/\">Sitepoint's tutorial</a>, <a href=\"https://scottspence.com/2019/10/31/build-an-mdx-blog/\">Scott Spence's tutorial</a>, and GatsbyJS' official <a href=\"https://www.gatsbyjs.com/docs/quick-start/\">Quick Start</a> page</p>\n</li>\n<li>\n<p><strong><a href=\"https://gohugo.io/\">Hugo</a></strong></p>\n\n<p>Hugo's strong point is that it is fast. Built with Go, Hugo websites often take milliseconds to build (compared to 30-60s for GatsbyJS). This is good for deployment and hosting services like Netlify, which allots 200 free build minutes a month and charges for minutes over this. Go, however, is not as ubiquitous in the Web Development space as Javascript, so this may be a turn off for some.</p>\n\n<p>Examples of websites powered by Hugo are: <a href=\"https://getbootstrap.com/\">Bootstrap</a>, <a href=\"https://kubernetes.com/\">Kubernetes</a>, <a href=\"https://ghost.org\">Ghost</a>,and <a href=\"https://coreui.io\">CoreUI</a>.</p>\n\n<p>To <strong>get started</strong> with Hugo, head to <a href=\"https://thenewstack.io/tutorial-use-hugo-to-generate-a-static-website/\">The New Stack's Hugo tutorial</a>, and Hugo's <a href=\"https://gohugo.io/getting-started/quick-start/\">quick start</a> page.</p>\n</li>\n<li>\n<p><strong><a href=\"https://jekyllrb.com/\">Jekyll</a></strong></p>\n\n<p>Being one of the earlier ones (made in 2008), Jekyll popularised the concept of a Static Site Generator. Running on Ruby, its shallow learning curve and its relative maturity make it a popular choice for many web developers. While other Static Site Generators have come on the scene, Jekyll remains widely used in the Web Development space.</p>\n\n<p>Examples of websites powered by Jekyll are: <a href=\"https://rubyonrails.org/\">Ruby on Rails</a>, and <a href=\"https://frame.ai/\">Frame AI</a>.</p>\n\n<p>To <strong>get started</strong> with Jekyll, head to <a href=\"https://opensource.com/article/17/4/getting-started-jekyll\">Open Source's Jekyll tutorials</a>, <a href=\"https://www.taniarascia.com/make-a-static-website-with-jekyll/\">Tania Rascia's tutorial</a>, and <a href=\"https://jekyllrb.com/tutorials/home/\">Jekyll's official tutorials</a>.</p>\n</li>\n<li>\n<p><strong><a href=\"https://11ty.dev/\">Eleventy</a></strong></p>\n\n<p>Billing itself as a <em>simpler</em> Static Site Generator, Eleventy is a Static Site Generator for those that just want the job done. Eleventy improved on the main problems with other Static Site Generators like Hugo and Jekyll. Jekyll has been around for some time, but it is viewed as too slow for some. Hugo is fast, but it requires using Go, a programming language that is unfamiliar for most Web Developers. Eleventy is fast, and uses Javascript, a language that most Web Developers already know.</p>\n\n<p>An example of a website powered by eleventy is <a href=\"https://11ty.dev\">their website</a>.</p>\n\n<p>To <strong>get started</strong> with Eleventy, head to <a href=\"https://www.sitepoint.com/getting-started-with-eleventy/\">Craig Buckler's tutorial</a>, <a href=\"https://tatianamac.com/posts/beginner-eleventy-tutorial-parti/\">Tatiana Mac's tutorial</a>, and Eleventy's official <a href=\"https://www.11ty.dev/docs/getting-started/\">getting started</a> page.</p>\n</li>\n</ol>\n\n<h2>\n  <a name=\"conclusion\" href=\"#conclusion\">\n  </a>\n  Conclusion\n</h2>\n\n<p>You can find a more exhaustive list of Static Site Generators at <a href=\"https://staticgen.com\">staticgen.com</a>. If you are interested in adapting your website to Static Site Generators or making a new one altogether, visit <a href=\"https://www.netlify.com/jamstack/\">this page</a> which talks about <strong>JAMstack</strong>, the greater movement behind Static Site Generators, and a new approach to web development that creates faster and more secure websites.</p>\n\n<p><em>Subscribe at <a href=\"https://darrendube.com\">darrendube.com</a> for more posts like this</em></p>\n\n","body_markdown":"We've all experienced it.\n\nWebsites suddenly becoming slow for no reason, loading times in the double digits, or even the dreaded *\"Error establishing a database connection\"*. It may come down to the hosting provider you are using, the size of your website, or even the complexity of your aesthetic design, but the crux of the matter is that:\n\n**WordPress is ageing.**\n\nRunning on code first written in 2003, it was designed for a time in the evolution of the internet when waiting minutes for a website to load was not uncommon. We weren't as dependent on the internet then. But now? As a tech generation becomes more and more impatient, website loading times are becoming a crucial factor in the design process of a website, even being [factored in by search engines when ranking](https://www.searchenginejournal.com/google-the-web-is-faster-since-page-speed-became-a-ranking-factor/301847/).\n\nSo what's the solution to this problem? **Static Site Generators!** (surprise, surprise).\n\nBut to understand how SSGs work and how they solve WordPress' problems, we first need to understand how WordPress works, and why this is causing slow websites.\n\n## How WordPress Works\n\nA typical, barebones website consists of HTML (for the content and structure), CSS (for the design), and JS (for any logic or processing). For anyone starting out in Web Development, the normal inclination would be to write a separate HTML file for every page on your website. We would call this a **static website**.\n\nSimple enough: you get easy customisation, no complex scripts to slow your site down, and a compact website that doesn't take up much space. Sure, this works for a simple website with 5 pages. But what about a blog with 50 posts? Or an e-commerce website with hundreds of products? I'm sure you can see where I'm going with this. With all these examples, sure, you can copy and paste a blog post template and edit the contents each time you want to write a new blog post, but that's taking away precious time. Time you could be spending writing blog posts.\n\nWordPress solves this problem by (and I'm massively oversimplifying here) storing page and blog post data in a database, separate from the styles. When a user visits a page on the website, WordPress executes PHP code, retrieving data from a database, and assembling this data into HTML and CSS. This is an example of what we call a **dynamic website**.\n\nAll this code has to execute before the website has been rendered, while the user is waiting for the page to load, in a context where [40% of people will abandon a website that takes more than 3 seconds to load](https://www.entrepreneur.com/article/281986).\n\nAn optimised WordPress website with the best hosting and minimal assets will take about 1-2 seconds to load. But a website with cheap, low-cost hosting (the type most of us bloggers/portfolio owners will probably use) will take about 4-5 seconds!\n\n## Static Site Generators\n\nNow, instead of retrieving data from a database and assembling HTML and CSS each time a website loads, imagine if we just prebuilt this HTML and CSS *before* the user visited the website, and stored this instead. Instead of executing code, we deliver these files as-is when a person visits our site. This processing happens before the user visits the site, meaning the files are ready to be served as soon as a request is made.\n\nThink of an SSG as an application that inputs website data and outputs a folder with all the HTML, CSS, and assets.\n\nTherefore, while with WordPress we speak of load time, with Static Site Generators, this becomes almost negligible, and we shift our focus to [build time](https://css-tricks.com/comparing-static-site-generator-build-times/).\n\nStatic Site Generators are relatively new - below is the growth in popularity of the search term *\"Static Site Generator\"*:\n\n![Google Trends for 'Static Site Generator'](https://i.ibb.co/QnKkvyt/ssg-search-trend.png)\n\n### PROS\n\n\n#### Performance\n\n  Because Static Site Generators prebuild websites *before* they are requested by users, load times are cut from several seconds to mere milliseconds!\n\n  In-site navigation is also unbelievably fast. In fact, navigating from one page to another is almost instantaneous (Try it [now](https://darrendube.com/)! This website is powered by an SSG). This is because the SSG I use ([GatsbyJS](https://gatsbyjs.com/)) prefetches the files and assets of other pages on the website so that by the time you want to go to another page, it has everything ready!\n\n\n#### Security\n\n  Databases, servers, and outdated software running on them are a hacker's dream. [A study](https://www.wpwhitesecurity.com/statistics-70-percent-wordpress-installations-vulnerable/) found that about 70% of WordPress websites had a security vulnerability!\n\n  The reason is simple - the more servers involved and the more processes and executions done by a server, the more loopholes and vulnerabilities can be found.\n\n  But by preloading our pages, we eliminate the need for any logic and work to be performed, thereby eliminating the risk of hackers injecting malicious code into these processes.\n\n\n#### Cost\n\n  To run a self-hosted WordPress website, you need to spend on average $5-10 a month on hosting plus about $10 annually for a domain. All in all, you could easily spend over $100 a year. With Static Site Generators, this goes down to $0 (or \\$10 a year for a custom domain).\n\n  Because no processing power is needed, you can host your website on free hosting providers like [Netlify](https://netlify.com/) and [GitHub Pages](https://pages.github.com/).\n\n\n#### Version Control\n\n  Most Static Site Generator websites are published by pushing code to a remote git repository, where it is automatically built and deployed. Apart from making the deployment process easy, this makes it easy to revert to a previous version of your site should the need arise.\n\n\nBut, as with anything, Static Site Generators also have some:\n\n### CONS\n\n\n#### Pretty steep learning curve\n\n  (Unless you are already a programmer).\n\n  One of the reasons WordPress is so popular is its relatively shallow learning curve. You get a GUI, a dashboard, and a text editor - literally everything short of a WYSIWYG editor.\n\n  ![A WordPress Dashboard](https://www.wpexplorer.com/wp-content/uploads/wordpress-dashboard-guide-main-dashboard-widgets.jpg)\n\n  Static Site Generators require writing content in Markdown - not very intuitive for the average person.\n  \n  ![Writing in Markdown](https://user-images.githubusercontent.com/5476205/32066320-35850040-ba34-11e7-8175-4d58f9735010.png)\n\n  Add to this their relatively small community compared to WordPress, and this makes the learning curve that much steeper.\n\n\n#### No built-in commenting\n\n  One of the many side-effects of not running on a server is that you don't get any services out of the box that require processing. That means comments, search, and most forms of contact forms will need third party services. A popular free third-party commenting service is [Disqus](https://disqus.com/).\n\n\n#### Updating and Publishing the site requires tools on your computer\n\n  This means that you can only update your website from a computer that has that particular Static Site Generator installed - plus other dependencies. A WordPress site, however, can be edited from any computer with a browser and an internet connection.\n\n## Common Static Site Generators out there\n\n1. **[Gatsby](https://gatsbyjs.com/)**\n\n    Based on react and running on Javascript, GatsbyJS is very easy to transition to for existing web-developers who have already been working with Javascript. What makes it a popular choice is that it can be used to make [Progressive Web Apps (PWAs)](https://web.dev/progressive-web-apps/), and its websites are designed to be very fast for users. The [gatsby-plugin-image](https://www.gatsbyjs.com/plugins/gatsby-plugin-image) plugin (and its predecessor, [gatsby-image](https://www.gatsbyjs.com/plugins/gatsby-image/)) give GatsbyJS image-optimisation out of the box, with features such as resizing, blurring, and preoptimisation. GatsbyJS also has a very rich ecosystem with clear and comprehensive [documentation](https://www.gatsbyjs.com/docs/), and a fast growing community on GitHub. This all helps make GatsbyJS sites (like [this one](https://darrendube.com/)) faster for users than websites made by other Static Site Generators.\n\n    Examples of websites powered by GatsbyJS are: [Airbnb's Engineering and Data Science website](https://airbnb.io/), [Figma](https://figma.com/), [ReactJS](https://reactjs.org), [Hopper](https://hopper.com).\n\n    To **get started** with GatsbyJS, head to [Sitepoint's tutorial](https://www.sitepoint.com/gatsby-guide/), [Scott Spence's tutorial](https://scottspence.com/2019/10/31/build-an-mdx-blog/), and GatsbyJS' official [Quick Start](https://www.gatsbyjs.com/docs/quick-start/) page\n\n2. **[Hugo](https://gohugo.io/)**\n\n    Hugo's strong point is that it is fast. Built with Go, Hugo websites often take milliseconds to build (compared to 30-60s for GatsbyJS). This is good for deployment and hosting services like Netlify, which allots 200 free build minutes a month and charges for minutes over this. Go, however, is not as ubiquitous in the Web Development space as Javascript, so this may be a turn off for some.\n\n    Examples of websites powered by Hugo are: [Bootstrap](https://getbootstrap.com/), [Kubernetes](https://kubernetes.com/), [Ghost](https://ghost.org),and [CoreUI](https://coreui.io).\n\n    To **get started** with Hugo, head to [The New Stack's Hugo tutorial](https://thenewstack.io/tutorial-use-hugo-to-generate-a-static-website/), and Hugo's [quick start](https://gohugo.io/getting-started/quick-start/) page.\n\n3. **[Jekyll](https://jekyllrb.com/)**\n\n    Being one of the earlier ones (made in 2008), Jekyll popularised the concept of a Static Site Generator. Running on Ruby, its shallow learning curve and its relative maturity make it a popular choice for many web developers. While other Static Site Generators have come on the scene, Jekyll remains widely used in the Web Development space.\n\n    Examples of websites powered by Jekyll are: [Ruby on Rails](https://rubyonrails.org/), and [Frame AI](https://frame.ai/).\n\n    To **get started** with Jekyll, head to [Open Source's Jekyll tutorials](https://opensource.com/article/17/4/getting-started-jekyll), [Tania Rascia's tutorial](https://www.taniarascia.com/make-a-static-website-with-jekyll/), and [Jekyll's official tutorials](https://jekyllrb.com/tutorials/home/).\n\n4. **[Eleventy](https://11ty.dev/)**\n\n    Billing itself as a *simpler* Static Site Generator, Eleventy is a Static Site Generator for those that just want the job done. Eleventy improved on the main problems with other Static Site Generators like Hugo and Jekyll. Jekyll has been around for some time, but it is viewed as too slow for some. Hugo is fast, but it requires using Go, a programming language that is unfamiliar for most Web Developers. Eleventy is fast, and uses Javascript, a language that most Web Developers already know.\n\n    An example of a website powered by eleventy is [their website](https://11ty.dev).\n\n    To **get started** with Eleventy, head to [Craig Buckler's tutorial](https://www.sitepoint.com/getting-started-with-eleventy/), [Tatiana Mac's tutorial](https://tatianamac.com/posts/beginner-eleventy-tutorial-parti/), and Eleventy's official [getting started](https://www.11ty.dev/docs/getting-started/) page.\n\n## Conclusion\n\nYou can find a more exhaustive list of Static Site Generators at [staticgen.com](https://staticgen.com). If you are interested in adapting your website to Static Site Generators or making a new one altogether, visit [this page](https://www.netlify.com/jamstack/) which talks about **JAMstack**, the greater movement behind Static Site Generators, and a new approach to web development that creates faster and more secure websites.\n\n*Subscribe at [darrendube.com](https://darrendube.com) for more posts like this*","user":{"name":"darrendube","username":"darrendube","twitter_username":"DarrenDube","github_username":"darrendube","website_url":"https://darrendube.com","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--16oQ2jh1--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/395881/68f35c16-ed9b-41c9-bc04-63c2f61863e3.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--_O_kgxrG--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/395881/68f35c16-ed9b-41c9-bc04-63c2f61863e3.jpg"},"readingTime":"9 min read"}},"__N_SSG":true}