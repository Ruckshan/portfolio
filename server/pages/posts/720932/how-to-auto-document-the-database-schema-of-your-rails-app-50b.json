{"pageProps":{"post":{"type_of":"article","id":720932,"title":"How to auto-document the database schema of your Rails app","description":"I’m wrapping up my RailsConf 2021 presentation recap today. Check out Part 1, Part 2  and Part 3 in c...","readable_publish_date":"Jun 8","slug":"how-to-auto-document-the-database-schema-of-your-rails-app-50b","path":"/appland/how-to-auto-document-the-database-schema-of-your-rails-app-50b","url":"https://dev.to/appland/how-to-auto-document-the-database-schema-of-your-rails-app-50b","comments_count":1,"public_reactions_count":92,"collection_id":12899,"published_timestamp":"2021-06-08T11:46:33Z","positive_reactions_count":92,"cover_image":null,"social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--FwXhMN6c--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0idvb4tawhdkoc0e998.png","canonical_url":"https://dev.to/appland/how-to-auto-document-the-database-schema-of-your-rails-app-50b","created_at":"2021-06-07T19:48:25Z","edited_at":"2021-06-08T13:29:45Z","crossposted_at":null,"published_at":"2021-06-08T11:46:33Z","last_comment_at":"2021-06-10T21:30:05Z","reading_time_minutes":2,"tag_list":["rails","database","techtalks"],"tags":["rails","database","techtalks"],"body_html":"<p>I’m wrapping up my <a href=\"https://www.railsconf.org/\">RailsConf 2021</a> presentation recap today. Check out <a href=\"https://dev.to/appland/we-need-a-better-way-to-communicate-and-explain-our-code-decisions-1nic\">Part 1</a>, <a href=\"https://dev.to/appland/how-to-auto-document-end-to-end-flows-with-appmap-41d2\">Part 2 </a> and <a href=\"https://dev.to/appland/how-to-auto-generate-swagger-openapi-doc-for-your-web-services-3npn\">Part 3</a> in case you missed them! This final post recaps the demo I gave on how to auto-document database schemas with a gem called <code>rails-erd</code>.</p>\n\n<p>An entity relationship diagram (ERD) shows the tables, columns and relations in a relational database schema. To auto-generate an ERD for a specific version of your code directly from the database, you can use the <code>rails-erd</code> gem. It does this by: </p>\n\n<ul>\n<li>  Gathering database meta data through active record (it uses ActiveRecord so it’s database independent).</li>\n<li>  Analyzing the schema and then generating a DOT file, which can be processed into a PDF.</li>\n<li>  Bundling all of this up into a rake task, which you can use to update the ERD when you modify the schema.</li>\n</ul>\n\n<p>In the ERD PDF file, you can see a detailed diagram of your database schema. This is useful for analyzing the data model of an app and identifying features such as nullable and not nullable columns, column types, primary keys, foreign keys and the different types of relationships. </p>\n\n<p>You can also get other insights from looking at the schema, such as security information. In my demo, for instance, I was able to see that the password remember and reset token were all stored as a one-way digest. So, if an attacker was able to obtain access to this database, I know they wouldn’t be able to obtain these secrets.  </p>\n\n<p>You can watch this portion of my RailsConf talk in the video clip above. If you want to follow along in the code or look it up later, I’ve created a branch called <code>erd</code> within the <code>land-of-apps</code> fork of the Rails Sample App. Check it out here: </p>\n\n<p><a href=\"http://github.com/land-of-apps/sample_app_6th_ed/tree/erd\">http://github.com/land-of-apps/sample_app_6th_ed/tree/erd</a>  </p>\n\n<p>I’d love to hear your comments, suggestions and questions in <a href=\"https://discord.com/invite/N9VUap6\">Discord</a>! And feel free to explore the other two types of code design docs that I demoed how to auto-generate, including:</p>\n\n<ol>\n<li><a href=\"https://github.com/land-of-apps/sample_app_6th_ed/tree/eager-loading\">AppMap covering end-to-end data flows</a></li>\n<li><a href=\"http://github.com/land-of-apps/sample_app_6th_ed/tree/swagger\">Swagger covering web services and APIs</a></li>\n</ol>\n\n","body_markdown":"I’m wrapping up my [RailsConf 2021](https://www.railsconf.org/) presentation recap today. Check out [Part 1](https://dev.to/appland/we-need-a-better-way-to-communicate-and-explain-our-code-decisions-1nic), [Part 2 ](https://dev.to/appland/how-to-auto-document-end-to-end-flows-with-appmap-41d2) and [Part 3](https://dev.to/appland/how-to-auto-generate-swagger-openapi-doc-for-your-web-services-3npn) in case you missed them! This final post recaps the demo I gave on how to auto-document database schemas with a gem called `rails-erd`.\n\nAn entity relationship diagram (ERD) shows the tables, columns and relations in a relational database schema. To auto-generate an ERD for a specific version of your code directly from the database, you can use the `rails-erd` gem. It does this by: \n\n*   Gathering database meta data through active record (it uses ActiveRecord so it’s database independent).\n*   Analyzing the schema and then generating a DOT file, which can be processed into a PDF.\n*   Bundling all of this up into a rake task, which you can use to update the ERD when you modify the schema.\n\nIn the ERD PDF file, you can see a detailed diagram of your database schema. This is useful for analyzing the data model of an app and identifying features such as nullable and not nullable columns, column types, primary keys, foreign keys and the different types of relationships. \n\nYou can also get other insights from looking at the schema, such as security information. In my demo, for instance, I was able to see that the password remember and reset token were all stored as a one-way digest. So, if an attacker was able to obtain access to this database, I know they wouldn’t be able to obtain these secrets.  \n\nYou can watch this portion of my RailsConf talk in the video clip above. If you want to follow along in the code or look it up later, I’ve created a branch called `erd` within the `land-of-apps` fork of the Rails Sample App. Check it out here: \n\n[http://github.com/land-of-apps/sample_app_6th_ed/tree/erd](http://github.com/land-of-apps/sample_app_6th_ed/tree/erd)  \n\nI’d love to hear your comments, suggestions and questions in [Discord](https://discord.com/invite/N9VUap6)! And feel free to explore the other two types of code design docs that I demoed how to auto-generate, including:\n\n1. [AppMap covering end-to-end data flows](https://github.com/land-of-apps/sample_app_6th_ed/tree/eager-loading)\n2. [Swagger covering web services and APIs](http://github.com/land-of-apps/sample_app_6th_ed/tree/swagger )","user":{"name":"Kevin Gilpin","username":"kgilpin","twitter_username":"kegilpin","github_username":"kgilpin","website_url":"https://appland.com","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--IRMQRbkN--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555587/2be89914-0dee-4f3f-a4f0-2102df256d7d.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--3sMQUeQo--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555587/2be89914-0dee-4f3f-a4f0-2102df256d7d.jpeg"},"organization":{"name":"AppLand","username":"appland","slug":"appland","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--W7Ixadu0--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3566/db90af67-aa32-4983-99fb-b98db0777b17.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--P7is9gP1--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3566/db90af67-aa32-4983-99fb-b98db0777b17.png"},"flare_tag":{"name":"techtalks","bg_color_hex":"#311a99","text_color_hex":"#ff6264"},"readingTime":"2 min read"}},"__N_SSG":true}