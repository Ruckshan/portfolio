{"pageProps":{"post":{"type_of":"article","id":647343,"title":"Solution: Palindromic Substrings","description":"This is part of a series of Leetcode solution explanations (index). If you liked this solution or fou...","readable_publish_date":"Mar 27","slug":"solution-palindromic-substrings-54jf","path":"/seanpgallivan/solution-palindromic-substrings-54jf","url":"https://dev.to/seanpgallivan/solution-palindromic-substrings-54jf","comments_count":0,"public_reactions_count":9,"collection_id":11116,"published_timestamp":"2021-03-27T09:32:30Z","positive_reactions_count":9,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--qPtwpkMU--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6kh6uk54meytthtuovr.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--fz3VjK8h--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6kh6uk54meytthtuovr.png","canonical_url":"https://dev.to/seanpgallivan/solution-palindromic-substrings-54jf","created_at":"2021-03-27T09:32:30Z","edited_at":null,"crossposted_at":null,"published_at":"2021-03-27T09:32:30Z","last_comment_at":"2021-03-27T09:32:30Z","reading_time_minutes":3,"tag_list":["algorithms","javascript","java","python"],"tags":["algorithms","javascript","java","python"],"body_html":"<p><em>This is part of a series of Leetcode solution explanations (<a href=\"https://dev.to/seanpgallivan/leetcode-solutions-index-57fl\">index</a>). If you liked this solution or found it useful,</em> <strong><em>please like</em></strong> <em>this post and/or</em> <strong><em>upvote</em></strong> <em><a href=\"https://leetcode.com/problems/palindromic-substrings/discuss/1129426\">my solution post on Leetcode's forums</a>.</em></p>\n\n\n<hr>\n\n<h4>\n  <a name=\"leetcode-problem-647-medium-palindromic-substrings\" href=\"#leetcode-problem-647-medium-palindromic-substrings\" class=\"anchor\">\n  </a>\n  <a href=\"https://leetcode.com/problems/palindromic-substrings/\">Leetcode Problem #647 (<em>Medium</em>): Palindromic Substrings</a>\n</h4>\n\n\n<hr>\n\n<h4>\n  <a name=\"description\" href=\"#description\" class=\"anchor\">\n  </a>\n  <strong><em>Description:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#idea\"><em>Solution Idea</em></a> || <em>Code</em>: <a href=\"#javascript-code\"><em>JavaScript</em></a> | <a href=\"#python-code\"><em>Python</em></a> | <a href=\"#java-code\"><em>Java</em></a> | <a href=\"#c-code\"><em>C++</em></a>)</p>\n\n<blockquote>\n<p>Given a string, your task is to count how many palindromic substrings in this string.</p>\n\n<p>The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.</p>\n</blockquote>\n\n\n<hr>\n\n<h4>\n  <a name=\"examples\" href=\"#examples\" class=\"anchor\">\n  </a>\n  <strong><em>Examples:</em></strong>\n</h4>\n\n<blockquote>\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Example 1:</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input:</td>\n<td>\"abc\"</td>\n</tr>\n<tr>\n<td>Output:</td>\n<td>3</td>\n</tr>\n<tr>\n<td>Explanation:</td>\n<td>Three palindromic strings: \"a\", \"b\", \"c\".</td>\n</tr>\n</tbody>\n</table></div>\n\n<div class=\"table-wrapper-paragraph\"><table>\n<thead>\n<tr>\n<th>Example 2:</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Input:</td>\n<td>\"aaa\"</td>\n</tr>\n<tr>\n<td>Output:</td>\n<td>6</td>\n</tr>\n<tr>\n<td>Explanation:</td>\n<td>Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".</td>\n</tr>\n</tbody>\n</table></div>\n</blockquote>\n\n\n<hr>\n\n<h4>\n  <a name=\"constraints\" href=\"#constraints\" class=\"anchor\">\n  </a>\n  <strong><em>Constraints:</em></strong>\n</h4>\n\n<blockquote>\n<ul>\n<li>The input string length won't exceed <code>1000</code>.</li>\n</ul>\n</blockquote>\n\n\n<hr>\n\n<h4>\n  <a name=\"idea\" href=\"#idea\" class=\"anchor\">\n  </a>\n  <strong><em>Idea:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#description\"><em>Problem Description</em></a> || <em>Code</em>: <a href=\"#javascript-code\"><em>JavaScript</em></a> | <a href=\"#python-code\"><em>Python</em></a> | <a href=\"#java-code\"><em>Java</em></a> | <a href=\"#c-code\"><em>C++</em></a>)</p>\n\n<p>This problem, like many, is all about optimization. The naive solution would be to check if each and every substring is a palindrome, but that would easily achieve a <strong>TLE</strong> result.</p>\n\n<p>Instead, the first realization that we can make is that each larger palindrome is built upon many layers of smaller palindromes, going back to its center. So we could optimize our solution by iterating through <strong>S</strong> and considering the index <strong>i</strong> to be the center of a series of potential palindromes.</p>\n\n<p>Then, for each <strong>i</strong> we could use two more pointers (<strong>j &amp; k</strong>) which would spread out in both directions from <strong>i</strong>. As long as <strong>S[j] == S[k]</strong>, we'd know we had found a new palindrome and could continue spreading outward.</p>\n\n<p>We would have to duplicate this process for even-length palindromes, as their center would be two characters intead of one.</p>\n\n<p>But we can optimize more than that.</p>\n\n<p>If we instead think of the center of the palindrome not as just one or two characters, but as <em>any</em> length of repeated characters, then we can break each iteration down into two steps.</p>\n\n<p>First, we identify how long the \"center\" is by moving our right-size pointer (<strong>k</strong>) forwards while checking for duplicate characters. Now, instead of our center just being a single palindrome, it will be the <strong>Nth triangular number</strong> (defined as <strong>N * (N + 1) / 2</strong>) to account for all the smaller palindromes of which it's made.</p>\n\n<p>After that, we can spread out with <strong>j</strong> and <strong>k</strong> just as before. Since we've dealt with the entire center's worth of palindromes, we can move <strong>i</strong> forward to start up again after the end of the center, regardless of its length.</p>\n\n\n<hr>\n\n<h4>\n  <a name=\"implementation\" href=\"#implementation\" class=\"anchor\">\n  </a>\n  <strong><em>Implementation:</em></strong>\n</h4>\n\n<p>The code for all four languages is very similar.</p>\n\n\n<hr>\n\n<h4>\n  <a name=\"javascript-code\" href=\"#javascript-code\" class=\"anchor\">\n  </a>\n  <strong><em>Javascript Code:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#description\"><em>Problem Description</em></a> || <a href=\"#idea\"><em>Solution Idea</em></a>)<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">var</span> <span class=\"nx\">countSubstrings</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">S</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">len</span> <span class=\"o\">=</span> <span class=\"nx\">S</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"nx\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"nx\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">k</span> <span class=\"o\">=</span> <span class=\"nx\">i</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">k</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">S</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"nx\">S</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"nx\">k</span><span class=\"o\">++</span>\n        <span class=\"nx\">ans</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"nx\">k</span> <span class=\"o\">-</span> <span class=\"nx\">j</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">k</span> <span class=\"o\">-</span> <span class=\"nx\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"nx\">k</span><span class=\"o\">++</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">~</span><span class=\"nx\">j</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">k</span> <span class=\"o\">&lt;</span> <span class=\"nx\">len</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">S</span><span class=\"p\">[</span><span class=\"nx\">k</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"nx\">S</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">])</span> <span class=\"nx\">j</span><span class=\"o\">--</span><span class=\"p\">,</span> <span class=\"nx\">k</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"nx\">ans</span><span class=\"o\">++</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">ans</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h4>\n  <a name=\"python-code\" href=\"#python-code\" class=\"anchor\">\n  </a>\n  <strong><em>Python Code:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#description\"><em>Problem Description</em></a> || <a href=\"#idea\"><em>Solution Idea</em></a>)<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight python\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">countSubstrings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">S</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"n\">ans</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">),</span> <span class=\"mi\">0</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">i</span>\n            <span class=\"k\">while</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">k</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>                \n            <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n            <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n            <span class=\"k\">while</span> <span class=\"o\">~</span><span class=\"n\">j</span> <span class=\"ow\">and</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"ow\">and</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n                <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ans</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h4>\n  <a name=\"java-code\" href=\"#java-code\" class=\"anchor\">\n  </a>\n  <strong><em>Java Code:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#description\"><em>Problem Description</em></a> || <a href=\"#idea\"><em>Solution Idea</em></a>)<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight java\"><code><span class=\"kd\">class</span> <span class=\"nc\">Solution</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">countSubstrings</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"no\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"no\">S</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">(),</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"o\">;</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"no\">S</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"no\">S</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">k</span><span class=\"o\">++;</span>\n            <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"o\">;</span>\n            <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">++;</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span> <span class=\"o\">&amp;&amp;</span> <span class=\"no\">S</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">++)</span> <span class=\"o\">==</span> <span class=\"no\">S</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">j</span><span class=\"o\">--))</span> <span class=\"n\">ans</span><span class=\"o\">++;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n<hr>\n\n<h4>\n  <a name=\"c-code\" href=\"#c-code\" class=\"anchor\">\n  </a>\n  <strong><em>C++ Code:</em></strong>\n</h4>\n\n<p><br>(<em>Jump to</em>: <a href=\"#description\"><em>Problem Description</em></a> || <a href=\"#idea\"><em>Solution Idea</em></a>)<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight cpp\"><code><span class=\"k\">class</span> <span class=\"nc\">Solution</span> <span class=\"p\">{</span>\n<span class=\"nl\">public:</span>\n    <span class=\"kt\">int</span> <span class=\"n\">countSubstrings</span><span class=\"p\">(</span><span class=\"n\">string</span> <span class=\"n\">S</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">S</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">(),</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"n\">ans</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">;</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">j</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">S</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">--</span><span class=\"p\">])</span> <span class=\"n\">ans</span><span class=\"o\">++</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">ans</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n","body_markdown":"This is part of a series of Leetcode solution explanations ([index](https://dev.to/seanpgallivan/leetcode-solutions-index-57fl)). If you liked this solution or found it useful,* ***please like*** *this post and/or* ***upvote*** *[my solution post on Leetcode's forums](https://leetcode.com/problems/palindromic-substrings/discuss/1129426).*\n\n---\n\n#### [Leetcode Problem #647 (*Medium*): Palindromic Substrings](https://leetcode.com/problems/palindromic-substrings/)\n\n---\n\n#### ***Description:***\n\n<br />(*Jump to*: [*Solution Idea*](#idea) || *Code*: [*JavaScript*](#javascript-code) | [*Python*](#python-code) | [*Java*](#java-code) | [*C++*](#c-code))\n\n>\nGiven a string, your task is to count how many palindromic substrings in this string.\n>\nThe substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.\n\n---\n\n#### ***Examples:***\n>\nExample 1:||\n|---:|---|\nInput:|\"abc\"\nOutput:|3\nExplanation:|Three palindromic strings: \"a\", \"b\", \"c\".\n>\nExample 2:||\n|---:|---|\nInput:|\"aaa\"\nOutput:|6\nExplanation:|Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n\n---\n\n#### ***Constraints:***\n>\n - The input string length won't exceed `1000`.\n\n---\n\n#### ***Idea:***\n\n<br />(*Jump to*: [*Problem Description*](#description) || *Code*: [*JavaScript*](#javascript-code) | [*Python*](#python-code) | [*Java*](#java-code) | [*C++*](#c-code))\n\nThis problem, like many, is all about optimization. The naive solution would be to check if each and every substring is a palindrome, but that would easily achieve a **TLE** result.\n\nInstead, the first realization that we can make is that each larger palindrome is built upon many layers of smaller palindromes, going back to its center. So we could optimize our solution by iterating through **S** and considering the index **i** to be the center of a series of potential palindromes.\n\nThen, for each **i** we could use two more pointers (**j & k**) which would spread out in both directions from **i**. As long as **S[j] == S[k]**, we'd know we had found a new palindrome and could continue spreading outward.\n\nWe would have to duplicate this process for even-length palindromes, as their center would be two characters intead of one.\n\nBut we can optimize more than that.\n\nIf we instead think of the center of the palindrome not as just one or two characters, but as *any* length of repeated characters, then we can break each iteration down into two steps.\n\nFirst, we identify how long the \"center\" is by moving our right-size pointer (**k**) forwards while checking for duplicate characters. Now, instead of our center just being a single palindrome, it will be the **Nth triangular number** (defined as **N * (N + 1) / 2**) to account for all the smaller palindromes of which it's made.\n\nAfter that, we can spread out with **j** and **k** just as before. Since we've dealt with the entire center's worth of palindromes, we can move **i** forward to start up again after the end of the center, regardless of its length.\n\n---\n\n#### ***Implementation:***\n\nThe code for all four languages is very similar.\n\n---\n\n#### ***Javascript Code:***\n<br />(*Jump to*: [*Problem Description*](#description) || [*Solution Idea*](#idea))\n```javascript\nvar countSubstrings = function(S) {\n    let len = S.length, ans = 0\n    for (let i = 0; i < len; i++) {\n        let j = i - 1, k = i\n        while (k < len - 1 && S[k] === S[k+1]) k++\n        ans += (k - j) * (k - j + 1) / 2, i = k++\n        while (~j && k < len && S[k] === S[j]) j--, k++, ans++\n    }\n    return ans\n};\n```\n\n---\n\n#### ***Python Code:***\n<br />(*Jump to*: [*Problem Description*](#description) || [*Solution Idea*](#idea))\n```python\nclass Solution:\n    def countSubstrings(self, S: str) -> int:\n        ans, n, i = 0, len(S), 0\n        while (i < n):\n            j, k = i - 1, i\n            while k < n - 1 and S[k] == S[k+1]: k += 1                \n            ans += (k - j) * (k - j + 1) // 2\n            i, k = k + 1, k + 1\n            while ~j and k < n and S[k] == S[j]:\n                j, k, ans = j - 1, k + 1, ans + 1\n        return ans\n```\n\n---\n\n#### ***Java Code:***\n<br />(*Jump to*: [*Problem Description*](#description) || [*Solution Idea*](#idea))\n```java\nclass Solution {\n    public int countSubstrings(String S) {\n        int len = S.length(), ans = 0;\n        for (int i = 0; i < len; i++) {\n            int j = i - 1, k = i;\n            while (k < len - 1 && S.charAt(k) == S.charAt(k+1)) k++;\n            ans += (k - j) * (k - j + 1) / 2;\n            i = k++;\n            while (j >= 0 && k < len && S.charAt(k++) == S.charAt(j--)) ans++;\n        }\n        return ans;\n    }\n}\n```\n\n---\n\n#### ***C++ Code:***\n<br />(*Jump to*: [*Problem Description*](#description) || [*Solution Idea*](#idea))\n```c++\nclass Solution {\npublic:\n    int countSubstrings(string S) {\n        int len = S.length(), ans = 0;\n        for (int i = 0; i < len; i++) {\n            int j = i - 1, k = i;\n            while (k < len - 1 && S[k] == S[k+1]) k++;\n            ans += (k - j) * (k - j + 1) / 2, i = k++;\n            while (~j && k < len && S[k++] == S[j--]) ans++;\n        }\n        return ans;\n    }\n};\n```","user":{"name":"seanpgallivan","username":"seanpgallivan","twitter_username":null,"github_username":"seanpgallivan","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--crelugx6--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/294302/b8052502-9903-46e2-a6f3-ba477c85de69.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--Kcu5py0m--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/294302/b8052502-9903-46e2-a6f3-ba477c85de69.jpg"},"readingTime":"5 min read"}},"__N_SSG":true}