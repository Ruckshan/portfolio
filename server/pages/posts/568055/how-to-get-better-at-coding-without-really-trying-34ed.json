{"pageProps":{"post":{"type_of":"article","id":568055,"title":"How to Get Better at Coding Without Really Trying","description":"Intro   This article was made to help those, like myself, that have trouble finding the time...","readable_publish_date":"Mar 31","slug":"how-to-get-better-at-coding-without-really-trying-34ed","path":"/thelogicwarlock/how-to-get-better-at-coding-without-really-trying-34ed","url":"https://dev.to/thelogicwarlock/how-to-get-better-at-coding-without-really-trying-34ed","comments_count":11,"public_reactions_count":407,"collection_id":null,"published_timestamp":"2021-03-31T19:54:17Z","positive_reactions_count":407,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--vrcBZfe2--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/40tuyarw3aof5sn5dasl.jpg","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--OBjW28Yo--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/40tuyarw3aof5sn5dasl.jpg","canonical_url":"https://dev.to/thelogicwarlock/how-to-get-better-at-coding-without-really-trying-34ed","created_at":"2021-01-10T21:45:52Z","edited_at":null,"crossposted_at":null,"published_at":"2021-03-31T19:54:17Z","last_comment_at":"2021-05-17T03:30:21Z","reading_time_minutes":4,"tag_list":["beginners","webdev","tutorial","javascript"],"tags":["beginners","webdev","tutorial","javascript"],"body_html":"<h1>\n  <a name=\"intro\" href=\"#intro\" class=\"anchor\">\n  </a>\n  Intro\n</h1>\n\n<p>This article was made to help those, like myself, that have trouble finding the time, or the patience to practice skills related to WebDev. Time spent on anything is precious and I despise needing to go back to re-learn something over and over again.</p>\n\n<p>I want to state that this tutorial isn't about committing EVERYTHING to memory. It's not worth anyone's time to try and memorize every JavaScript Array method, or some specific Data Structure that you'll never use. This is about learning how to code and how to learn new skills.</p>\n\n<p>Also, if you don't want to spend the time reading through this article you can find a TLDR at the end</p>\n\n<h2>\n  <a name=\"repetition\" href=\"#repetition\" class=\"anchor\">\n  </a>\n  Repetition\n</h2>\n\n<p>Repetition is probably one of the best methods I've used to solidify knowledge. This is done by initially practicing a problem over the course of a week. For example, if you started on a Monday you would practice again on Wednesday, Friday, and Sunday. Practicing every other day helps to train your brain to recall the information better and better each time.</p>\n\n<p>After the first week, you should come back to it over increasingly extended amounts of time. Something like a full week, to a few weeks, to a full month. That is assuming you aren't using the new concept in any of your projects or work.</p>\n\n<p>Coming back can really help you to see if you've actually solidified the knowledge. You might even find something that was overlooked in previous practices. Just be sure you come back to it before it's fully forgotten!</p>\n\n<p>I've used these methods to practice concepts like Recursion, Async/Await, Redux, and State Machines. </p>\n\n<h2>\n  <a name=\"know-how-you-learn\" href=\"#know-how-you-learn\" class=\"anchor\">\n  </a>\n  Know How You Learn\n</h2>\n\n<p>Everyone has a preferred/best method to learn new things. This includes methods like reading, watching videos, or actively practicing, or a combination of these. At this point, you should know the best methods that help you to solidify knowledge.</p>\n\n<p>Personally, I prefer the hands-on approach where I'll try to implement a new concept on my own, then when I get stuck, or if I succeed I'll go over an article/tutorial on the topic. I find that this gives me a better perspective on why/how a thing is done the way it is.</p>\n\n<h2>\n  <a name=\"coding-challenges\" href=\"#coding-challenges\" class=\"anchor\">\n  </a>\n  Coding Challenges\n</h2>\n\n<p>There are many, many, many websites dedicated to providing coding challenges for a wide assortment of languages! These sites are perfect for practicing/perfecting your knowledge of a language. There is, however, a right way and a wrong way to do these challenges.</p>\n\n<p>These challenges should only be used to practice your knowledge of a language and nothing more. Not only that but you should only focus on problems that test concepts you are either uncomfortable with or if you want to try solving a problem in a unique, not straight-forward way. You won't get better if you only solve challenges you already know how to solve.</p>\n\n<p>If you're just starting out with a new language I recommend just doing the basics as your main objective. You should be comfortable with concepts like string manipulation, arrays, classes, hashes(objects), if statements, and loops.</p>\n\n<p>Once you are comfortable with the basics you should spend time using language-specific concepts, or try solving problems with a unique solution than you would have used. For example, try using recursion instead of if-statements, or try using a Hash instead of an Array to hold data, etc.</p>\n\n<p>I do need to state using unique solutions to challenges can be great practice but you shouldn't use complex solutions unless it makes sense. You can solve a problem in a unique way but will you understand that one-liner a year from now? Documentation can really help explain your thought patterns.</p>\n\n<p>Locating a site for coding challenges shouldn't be too difficult, and there are so many out there that you should be able to find one you like. I used to use <a href=\"https://www.codewars.com/dashboard\">codeWars</a> and <a href=\"https://www.hackerrank.com/dashboard\">hackerRank</a> for a while. I will say that I was able to find a challenge site that I fell in love with, <a href=\"https://www.codingame.com/\">codingame</a>. Its challenges are all themed around videogames. They've even gamified challenges by having a match-made game where you try to solve problems alongside others. It can be pretty fun!</p>\n\n<h2>\n  <a name=\"projects\" href=\"#projects\" class=\"anchor\">\n  </a>\n  Projects\n</h2>\n\n<p>While Coding Challenges are a great way to get better at a language, projects are how you get better at development. Projects challenge you to not only build something but to build something documented, tested, maintainable, etc. Manipulating an Object can only get you so far when you need to build a website or an API.</p>\n\n<p>In my opinion, most of your time practicing should be spent building projects. This is where you can really put all of your knowledge together and develop marketable skills for your career. Topics that you should be familiar with in any project would be testing, state management, file structure, documentation, and architecture.</p>\n\n<p>Having trouble figuring out what you want to build? Try rebuilding your version of an App, or website that you use frequently. Wish something existed that doesn't currently, build it yourself! My largest pet project is a collection manager for my constantly growing Magic: The Gathering collection.</p>\n\n<h2>\n  <a name=\"be-uncomfortable\" href=\"#be-uncomfortable\" class=\"anchor\">\n  </a>\n  Be Uncomfortable\n</h2>\n\n<p>This is probably the largest point I want to make. If you are frequently building projects or solving problems the same way you always have then you aren't learning anything new. Have you used Redux for state management? Why not try State Machines, or Context if your using React.</p>\n\n<p>It doesn't take long to realize there is no single solution for every problem you come across. Every tool/framework has advantages and disadvantages. Knowing multiple ways to solve a problem can really make your life easier when you're using a tool the right way. </p>\n\n<p>For example, it'd be overkill to use Rails to build an API for basic CRUD functionality with few customizations. Choosing something like Node + Express would be better?</p>\n\n<h2>\n  <a name=\"tldr\" href=\"#tldr\" class=\"anchor\">\n  </a>\n  TLDR\n</h2>\n\n<ul>\n<li><p>Don't just maintain knowledge, actively work to better it.</p></li>\n<li><p>You don't have to be perfect. (But that doesn't mean you can write crappy code either.)</p></li>\n<li><p>Work on something you are unfamiliar with.</p></li>\n<li><p>Solve a problem with an unfamiliar solution. (Using a loop? Why not recursion?)</p></li>\n<li><p>Would you understand this code if you just had a memory wipe? (Comment Everything)</p></li>\n</ul>\n\n","body_markdown":"# Intro\n\nThis article was made to help those, like myself, that have trouble finding the time, or the patience to practice skills related to WebDev. Time spent on anything is precious and I despise needing to go back to re-learn something over and over again.\n\nI want to state that this tutorial isn't about committing EVERYTHING to memory. It's not worth anyone's time to try and memorize every JavaScript Array method, or some specific Data Structure that you'll never use. This is about learning how to code and how to learn new skills.\n\nAlso, if you don't want to spend the time reading through this article you can find a TLDR at the end\n\n## Repetition\n\nRepetition is probably one of the best methods I've used to solidify knowledge. This is done by initially practicing a problem over the course of a week. For example, if you started on a Monday you would practice again on Wednesday, Friday, and Sunday. Practicing every other day helps to train your brain to recall the information better and better each time.\n\nAfter the first week, you should come back to it over increasingly extended amounts of time. Something like a full week, to a few weeks, to a full month. That is assuming you aren't using the new concept in any of your projects or work.\n\nComing back can really help you to see if you've actually solidified the knowledge. You might even find something that was overlooked in previous practices. Just be sure you come back to it before it's fully forgotten!\n\nI've used these methods to practice concepts like Recursion, Async/Await, Redux, and State Machines. \n\n## Know How You Learn\n\nEveryone has a preferred/best method to learn new things. This includes methods like reading, watching videos, or actively practicing, or a combination of these. At this point, you should know the best methods that help you to solidify knowledge.\n\nPersonally, I prefer the hands-on approach where I'll try to implement a new concept on my own, then when I get stuck, or if I succeed I'll go over an article/tutorial on the topic. I find that this gives me a better perspective on why/how a thing is done the way it is.\n\n## Coding Challenges\n\nThere are many, many, many websites dedicated to providing coding challenges for a wide assortment of languages! These sites are perfect for practicing/perfecting your knowledge of a language. There is, however, a right way and a wrong way to do these challenges.\n\nThese challenges should only be used to practice your knowledge of a language and nothing more. Not only that but you should only focus on problems that test concepts you are either uncomfortable with or if you want to try solving a problem in a unique, not straight-forward way. You won't get better if you only solve challenges you already know how to solve.\n\nIf you're just starting out with a new language I recommend just doing the basics as your main objective. You should be comfortable with concepts like string manipulation, arrays, classes, hashes(objects), if statements, and loops.\n\nOnce you are comfortable with the basics you should spend time using language-specific concepts, or try solving problems with a unique solution than you would have used. For example, try using recursion instead of if-statements, or try using a Hash instead of an Array to hold data, etc.\n\nI do need to state using unique solutions to challenges can be great practice but you shouldn't use complex solutions unless it makes sense. You can solve a problem in a unique way but will you understand that one-liner a year from now? Documentation can really help explain your thought patterns.\n\nLocating a site for coding challenges shouldn't be too difficult, and there are so many out there that you should be able to find one you like. I used to use [codeWars](https://www.codewars.com/dashboard) and [hackerRank](https://www.hackerrank.com/dashboard) for a while. I will say that I was able to find a challenge site that I fell in love with, [codingame](https://www.codingame.com/). Its challenges are all themed around videogames. They've even gamified challenges by having a match-made game where you try to solve problems alongside others. It can be pretty fun!\n\n## Projects\n\nWhile Coding Challenges are a great way to get better at a language, projects are how you get better at development. Projects challenge you to not only build something but to build something documented, tested, maintainable, etc. Manipulating an Object can only get you so far when you need to build a website or an API.\n\nIn my opinion, most of your time practicing should be spent building projects. This is where you can really put all of your knowledge together and develop marketable skills for your career. Topics that you should be familiar with in any project would be testing, state management, file structure, documentation, and architecture.\n\nHaving trouble figuring out what you want to build? Try rebuilding your version of an App, or website that you use frequently. Wish something existed that doesn't currently, build it yourself! My largest pet project is a collection manager for my constantly growing Magic: The Gathering collection.\n\n## Be Uncomfortable\n\nThis is probably the largest point I want to make. If you are frequently building projects or solving problems the same way you always have then you aren't learning anything new. Have you used Redux for state management? Why not try State Machines, or Context if your using React.\n\nIt doesn't take long to realize there is no single solution for every problem you come across. Every tool/framework has advantages and disadvantages. Knowing multiple ways to solve a problem can really make your life easier when you're using a tool the right way. \n\nFor example, it'd be overkill to use Rails to build an API for basic CRUD functionality with few customizations. Choosing something like Node + Express would be better?\n\n## TLDR\n\n* Don't just maintain knowledge, actively work to better it.\n\n* You don't have to be perfect. (But that doesn't mean you can write crappy code either.)\n\n* Work on something you are unfamiliar with.\n\n* Solve a problem with an unfamiliar solution. (Using a loop? Why not recursion?)\n\n* Would you understand this code if you just had a memory wipe? (Comment Everything)","user":{"name":"Kaemon Lovendahl","username":"thelogicwarlock","twitter_username":"TheLogicWarlock","github_username":"KaemonIsland","website_url":"http://kaemon-lovendahl.surge.sh/","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--xXLRI8oM--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/255032/7bed4f4d-1325-4e6d-9d90-aee028bc93d0.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--lZ4xV-50--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/255032/7bed4f4d-1325-4e6d-9d90-aee028bc93d0.jpeg"},"readingTime":"6 min read"}},"__N_SSG":true}