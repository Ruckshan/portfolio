{"pageProps":{"post":{"type_of":"article","id":640789,"title":"How I Made This Realistic Red Switch (Pure CSS)","description":"I created this pen last week after stumbling across this 3D Red Switch design on Dribble. Since t...","readable_publish_date":"Mar 22","slug":"how-i-made-this-realistic-red-switch-pure-css-49g2","path":"/ykadosh/how-i-made-this-realistic-red-switch-pure-css-49g2","url":"https://dev.to/ykadosh/how-i-made-this-realistic-red-switch-pure-css-49g2","comments_count":31,"public_reactions_count":515,"collection_id":null,"published_timestamp":"2021-03-22T09:12:59Z","positive_reactions_count":515,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--HIxlouku--/c_imagga_scale,f_auto,fl_progressive,h_420,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfu25gpfucsxjft21sz9.gif","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--v-8U2OPH--/c_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wfu25gpfucsxjft21sz9.gif","canonical_url":"https://dev.to/ykadosh/how-i-made-this-realistic-red-switch-pure-css-49g2","created_at":"2021-03-20T19:12:35Z","edited_at":null,"crossposted_at":null,"published_at":"2021-03-22T09:12:59Z","last_comment_at":"2021-07-14T18:45:34Z","reading_time_minutes":7,"tag_list":["codepen","webdev","css","tutorial"],"tags":["codepen","webdev","css","tutorial"],"body_html":"<p><iframe height=\"600\" src=\"https://codepen.io/ykadosh/embed/ExNOmZx?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" loading=\"lazy\" style=\"width: 100%;\">\n</iframe>\n</p>\n\n<p>I created this pen last week after stumbling across this <a href=\"https://dribbble.com/shots/14172039-3D-Red-Switch\">3D Red Switch</a> design on Dribble. Since then it gained a lot of popularity (much more than I have anticipated!), and a few people have asked me to write a tutorial about how I made it. </p>\n\n<p>I've used various different CSS techniques in the making of this, including gradients, 3D transformations, animations, and transitions. In this tutorial, I will go over some of these techniques in depth.</p>\n\n<h2>\n  <a name=\"simulating-a-state\" href=\"#simulating-a-state\">\n  </a>\n  Simulating a State\n</h2>\n\n<p>This is probably the oldest trick in the book. A switch has 2 states - on and off, but CSS has no way of maintaining such a state.</p>\n\n<p>To solve this, we can use one of the native HTML elements. Since we only need to maintain 2 states, a <strong>checkbox</strong> element is a great choice. We can use the <code>:checked</code> CSS selector to apply CSS based on whether the checkbox is checked or not.</p>\n\n<p>We wrap the whole thing in a <code>&lt;label/&gt;</code> to link the click event of the entire element to the <strong>checkbox</strong>, and we hide the checkbox itself using CSS.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;label</span> <span class=\"na\">class=</span><span class=\"s\">\"switch\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">checked</span><span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/label&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code><span class=\"nc\">.switch</span> <span class=\"p\">{</span>\n  <span class=\"nt\">input</span> <span class=\"p\">{</span>\n    <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>One issue with this is that we can't apply CSS to the <code>&lt;label/&gt;</code> itself based on the checkbox state, since there's no \"ancestor selector\" in CSS. Because of that, I placed all the switch elements after the <strong>checkbox</strong> and used the adjacent sibling selector (<code>+</code>) to apply CSS to them.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;label</span> <span class=\"na\">class=</span><span class=\"s\">\"switch\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">checked</span><span class=\"nt\">/&gt;</span>\n  <span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"button\"</span><span class=\"nt\">&gt;&lt;/div&gt;</span>\n<span class=\"nt\">&lt;/label&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code><span class=\"nc\">.switch</span> <span class=\"p\">{</span>\n  <span class=\"nt\">input</span> <span class=\"p\">{</span>\n    <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n\n    <span class=\"k\">&amp;</span><span class=\"nd\">:checked</span> <span class=\"o\">+</span> <span class=\"nc\">.button</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// Apply some CSS to .button when the checkbox is checked</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>If you need to simulate an element with more than 2 states, you can use other HTML elements like <strong>radio buttons</strong> (<code>&lt;input type=\"radio\"/&gt;</code>). Some people take this technique to the next level and create an entire game using CSS only! Check out this <a href=\"https://codepen.io/collection/AKkZro\">collection of pure CSS games</a> on CodePen for some inspiration.</p>\n\n<h2>\n  <a name=\"making-the-black-frame\" href=\"#making-the-black-frame\">\n  </a>\n  Making The Black Frame\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iIQDc-yE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxy24397o0m5ubyd5dxq.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--iIQDc-yE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxy24397o0m5ubyd5dxq.png\" alt=\"Making the black frame using CSS box-shadow\" loading=\"lazy\"></a></p>\n\n<p>I used <code>box-shadow</code> to simulate the button's frame. <code>box-shadow</code> is a very powerful CSS property, because it allows you to stack multiple shadow effects separated by a comma.</p>\n\n<p>I used a set of 5 shadow effects to create the frame, and a <code>border-radius</code> property to make the shadow round in the corners. Here's the breakdown:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code><span class=\"nc\">.switch</span> <span class=\"p\">{</span>\n  <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">5px</span><span class=\"p\">;</span>\n  <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> \n    <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">10px</span> <span class=\"m\">2px</span> <span class=\"nf\">rgba</span><span class=\"p\">(</span><span class=\"no\">black</span><span class=\"o\">,</span> <span class=\"m\">0</span><span class=\"mi\">.2</span><span class=\"p\">)</span><span class=\"o\">,</span> <span class=\"o\">//</span> <span class=\"n\">The</span> <span class=\"n\">surrounding</span> <span class=\"nf\">shadow</span> <span class=\"p\">(</span><span class=\"n\">first</span> <span class=\"n\">layer</span><span class=\"p\">)</span>\n    <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">1px</span> <span class=\"m\">2px</span> <span class=\"no\">black</span><span class=\"o\">,</span> <span class=\"o\">//</span> <span class=\"n\">The</span> <span class=\"n\">surrounding</span> <span class=\"nf\">shadow</span> <span class=\"p\">(</span><span class=\"n\">second</span> <span class=\"n\">layer</span><span class=\"p\">)</span>\n    <span class=\"nb\">inset</span> <span class=\"m\">0</span> <span class=\"m\">2px</span> <span class=\"m\">2px</span> <span class=\"m\">-2px</span> <span class=\"no\">white</span><span class=\"o\">,</span> <span class=\"o\">//</span> <span class=\"n\">The</span> <span class=\"nb\">top</span> <span class=\"no\">white</span> <span class=\"s2\">\"shine\"</span>\n    <span class=\"nb\">inset</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">2px</span> <span class=\"m\">15px</span> <span class=\"mh\">#47434c</span><span class=\"o\">,</span> <span class=\"o\">//</span> <span class=\"n\">The</span> <span class=\"n\">light</span> <span class=\"no\">gray</span> <span class=\"n\">frame</span>\n    <span class=\"nb\">inset</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">2px</span> <span class=\"m\">22px</span> <span class=\"no\">black</span><span class=\"p\">;</span> <span class=\"c1\">// The internal black shadow</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"making-the-3d-button-shape\" href=\"#making-the-3d-button-shape\">\n  </a>\n  Making The 3D Button Shape\n</h2>\n\n<p>I used CSS transformations and transitions to make the button appear 3-dimensional.</p>\n\n<p>The button itself is made of 3 divs (1 div and 2 pseudo-elements to be precise), that are perpendicular to each other, as illustrated below:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--slj7ihDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df8n9mxk6gwk2f39swsj.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--slj7ihDy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df8n9mxk6gwk2f39swsj.jpg\" alt=\"Making a 3D red switch using CSS\" loading=\"lazy\"></a><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code><span class=\"nc\">.button</span> <span class=\"p\">{</span>\n  <span class=\"k\">&amp;</span><span class=\"nd\">::before</span> <span class=\"p\">{</span>\n    <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">50px</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"nf\">rotateX</span><span class=\"p\">(</span><span class=\"m\">-90deg</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">&amp;</span><span class=\"nd\">::after</span> <span class=\"p\">{</span>\n    <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">50px</span><span class=\"p\">;</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span><span class=\"p\">;</span>\n    <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"nf\">translateY</span><span class=\"p\">(</span><span class=\"m\">50px</span><span class=\"p\">)</span> <span class=\"nf\">rotateX</span><span class=\"p\">(</span><span class=\"m\">-90deg</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Then, I rotated the entire button 25 degrees, and used <code>transform-origin</code> to set the pivot point away from the div, to make the button appear as if it is rotating around some point deeper inside the button, rather than around the div:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--r2_AaFs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjve0r7zy30xiwcij0df.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--r2_AaFs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjve0r7zy30xiwcij0df.jpg\" alt=\"Making a 3D red switch using CSS\" loading=\"lazy\"></a><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code><span class=\"nc\">.switch</span> <span class=\"p\">{</span>\n  <span class=\"nl\">perspective</span><span class=\"p\">:</span> <span class=\"m\">700px</span><span class=\"p\">;</span>\n\n  <span class=\"nc\">.button</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$rotation</span><span class=\"p\">:</span> <span class=\"m\">25deg</span><span class=\"p\">;</span>\n    <span class=\"nv\">$pivot-distance</span><span class=\"p\">:</span> <span class=\"m\">20px</span><span class=\"p\">;</span>\n    <span class=\"nl\">transform-origin</span><span class=\"p\">:</span> <span class=\"nb\">center</span> <span class=\"nb\">center</span> <span class=\"o\">-</span><span class=\"si\">#{</span><span class=\"nv\">$pivot-distance</span><span class=\"si\">}</span><span class=\"p\">;</span>\n     <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"nf\">translateZ</span><span class=\"p\">(</span><span class=\"nv\">$pivot-distance</span><span class=\"p\">)</span> <span class=\"nf\">rotateX</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"nv\">$rotation</span><span class=\"p\">);</span>\n    <span class=\"nl\">transform-style</span><span class=\"p\">:</span> <span class=\"n\">preserve-3d</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"making-the-animation\" href=\"#making-the-animation\">\n  </a>\n  Making The Animation\n</h2>\n\n<p>I used CSS transitions to rotate the switch back and forth. I wanted the transition to appear realistic, by starting slowly and ending quickly. I could've used one of the native easing functions, like <code>ease-in</code>, but that wasn't producing the right animation, so I used a custom <code>cubic-bezier()</code> easing function instead:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>transition: all 0.3s cubic-bezier(1, 0, 1, 1);\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1b-LGPpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb8h5909sy6hgx1fuu7u.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--1b-LGPpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb8h5909sy6hgx1fuu7u.png\" alt=\"Chrome DevTools transition cubic-bezier easing\" loading=\"lazy\"></a></p>\n\n<p>This curve means that the transition starts slowly, and ends quickly, just like a real switch that slowly turns until it \"clicks\" towards the end.</p>\n\n<h2>\n  <a name=\"making-the-io-characters\" href=\"#making-the-io-characters\">\n  </a>\n  Making The I/O Characters\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--q8JuC84J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8427wnzotib5mqne1e0.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--q8JuC84J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8427wnzotib5mqne1e0.png\" alt=\"Making the I/O characters using CSS gradients\" loading=\"lazy\"></a></p>\n\n<p>There are multiple tricks I could've used to create the I/O characters. I could've used real letters and apply styling to them, or use a special font. But since those are pretty simple characters to draw, I decided to use gradients to make them.</p>\n\n<p>CSS gradients are amazing, but I had no idea how powerful they are until I came across this great article about <a href=\"https://css-tricks.com/drawing-images-with-css-gradients/\">CSS Drawings</a>. </p>\n\n<p>The true power of gradients comes from the fact that they are considered as \"images\" by CSS, and therefore can benefit from the power of the <code>background</code> property. backgrounds in CSS can not only be stacked (like shadows), but they can also have custom position and size!</p>\n\n<p>This means that you can do pretty much <em>everything</em> with CSS gradients. If you want to understand just how far you can take it, check out <a href=\"https://a.singlediv.com/\">https://a.singlediv.com/</a> (every art piece on that site is made with a single div).</p>\n\n<p>The syntax is pretty simple:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code><span class=\"nt\">background</span><span class=\"o\">:</span> <span class=\"o\">&lt;</span><span class=\"nt\">image</span><span class=\"o\">&gt;</span> <span class=\"o\">&lt;</span><span class=\"nt\">position</span><span class=\"o\">&gt;</span> <span class=\"o\">/</span> <span class=\"o\">&lt;</span><span class=\"nt\">size</span><span class=\"o\">&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>You can stack multiple gradients with commas, and add <code>background-repeat: no-repeat</code> to prevent the gradients from repeating:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code><span class=\"nc\">.image</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background</span><span class=\"p\">:</span>\n    <span class=\"err\">&lt;</span><span class=\"n\">image</span><span class=\"err\">&gt;</span> <span class=\"err\">&lt;</span><span class=\"n\">position</span><span class=\"err\">&gt;</span> <span class=\"p\">/</span> <span class=\"err\">&lt;</span><span class=\"n\">size</span><span class=\"err\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"err\">&lt;</span><span class=\"n\">image</span><span class=\"err\">&gt;</span> <span class=\"err\">&lt;</span><span class=\"n\">position</span><span class=\"err\">&gt;</span> <span class=\"p\">/</span> <span class=\"err\">&lt;</span><span class=\"n\">size</span><span class=\"err\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"err\">&lt;</span><span class=\"n\">image</span><span class=\"err\">&gt;</span> <span class=\"err\">&lt;</span><span class=\"n\">position</span><span class=\"err\">&gt;</span> <span class=\"p\">/</span> <span class=\"err\">&lt;</span><span class=\"n\">size</span><span class=\"err\">&gt;</span><span class=\"p\">;</span>\n  <span class=\"nl\">background-repeat</span><span class=\"p\">:</span> <span class=\"nb\">no-repeat</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>I made the characters using a background with 2 gradients.<br>\nFor the \"I\" character, I used an all-white <code>linear-gradient()</code>, and made it narrow and long. For the \"O\" character I used a <code>radial-gradient()</code> with 4 color stops, from transparent to white and back to transparent.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code><span class=\"nl\">background</span><span class=\"p\">:</span>\n  <span class=\"nf\">linear-gradient</span><span class=\"p\">(</span><span class=\"no\">white</span><span class=\"o\">,</span> <span class=\"no\">white</span><span class=\"p\">)</span> <span class=\"m\">50%</span> <span class=\"m\">20%</span> <span class=\"o\">/</span> <span class=\"m\">5%</span> <span class=\"m\">20%</span><span class=\"o\">,</span> <span class=\"o\">//</span> <span class=\"n\">White</span> <span class=\"n\">vertical</span> <span class=\"nf\">line</span> <span class=\"p\">(</span><span class=\"s2\">\"I\"</span><span class=\"p\">)</span>\n  <span class=\"nf\">radial-gradient</span><span class=\"p\">(</span><span class=\"nb\">circle</span><span class=\"o\">,</span> <span class=\"nb\">transparent</span> <span class=\"m\">50%</span><span class=\"o\">,</span> <span class=\"no\">white</span> <span class=\"m\">52%</span><span class=\"o\">,</span> <span class=\"no\">white</span> <span class=\"m\">70%</span><span class=\"o\">,</span> <span class=\"nb\">transparent</span> <span class=\"m\">72%</span><span class=\"p\">)</span> <span class=\"m\">50%</span> <span class=\"m\">80%</span> <span class=\"o\">/</span> <span class=\"m\">33%</span> <span class=\"m\">25%</span><span class=\"p\">;</span> <span class=\"c1\">// White circle (\"O\")</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>If you take a look at the <code>radial-gradient()</code>, you'll notice that there's a <code>2%</code> gap between each color stop:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight css\"><code><span class=\"nt\">radial-gradient</span><span class=\"o\">(</span>\n  <span class=\"nt\">transparent</span> <span class=\"err\">50</span><span class=\"o\">%,</span> \n  <span class=\"nt\">white</span> <span class=\"err\">52</span><span class=\"o\">%,</span> \n  <span class=\"nt\">white</span> <span class=\"err\">70</span><span class=\"o\">%,</span> \n  <span class=\"nt\">transparent</span> <span class=\"err\">72</span><span class=\"o\">%</span>\n<span class=\"o\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This makes the different colors blend together, instead of having a crisp, pixelated transition. To illustrate this, take a look at the image below:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3OQrf7GX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5kp97c5yd6l7bjmdldm.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3OQrf7GX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5kp97c5yd6l7bjmdldm.jpg\" alt=\"CSS gradients - blending colors between color stops\" loading=\"lazy\"></a></p>\n\n<p>This is an inherent CSS gradient behavior - it creates a smooth blend between the colors when there's a gap between the color stops.</p>\n\n<h2>\n  <a name=\"making-the-led-gradient\" href=\"#making-the-led-gradient\">\n  </a>\n  Making The \"LED\" Gradient\n</h2>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JqdMc3GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzcrsdnvaao8vd70ukpx.jpg\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--JqdMc3GB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzcrsdnvaao8vd70ukpx.jpg\" alt=\"Making the LED light using CSS gradients and animations\" loading=\"lazy\"></a></p>\n\n<p>As seen in the picture above, I stacked 2 gradients to achieve a look of an LED bulb hidden behind a semi-transparent red plastic with small round bumps on it.</p>\n\n<p>I had to use 2 elements, one for each gradient, since the first gradient had to be none-repeating, and the second one had to be repeating. Additionally, I wanted to make the light \"flicker\", so I had to separate them.</p>\n\n<p>The first element is the <code>.light</code> element, where I used a <code>radial-gradient()</code> to illustrate a red LED light, with a brighter center (the center is orange, while the surroundings are red).<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code><span class=\"nc\">.light</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-image</span><span class=\"p\">:</span> <span class=\"nf\">radial-gradient</span><span class=\"p\">(</span>\n    <span class=\"nf\">adjust-hue</span><span class=\"p\">(</span><span class=\"nf\">lighten</span><span class=\"p\">(</span><span class=\"nv\">$color</span><span class=\"o\">,</span> <span class=\"m\">20%</span><span class=\"p\">)</span><span class=\"o\">,</span> <span class=\"m\">35</span><span class=\"p\">)</span><span class=\"o\">,</span> <span class=\"o\">//</span> <span class=\"n\">Orange</span>\n    <span class=\"nv\">$color</span> <span class=\"m\">40%</span><span class=\"o\">,</span> <span class=\"o\">//</span> <span class=\"n\">Red</span>\n    <span class=\"nb\">transparent</span> <span class=\"m\">70%</span>\n  <span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<blockquote>\n<p>Don't be alarmed by <code>adjust-hue()</code> and <code>lighten()</code>, I will cover those in the next part. For now, just consider them as hex colors.</p>\n</blockquote>\n\n<p>The second element is the <code>.dots</code> element, where I used a repeating <code>radial-gradient()</code> with a transparent center to create a matrix of round-shaped bumps.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code><span class=\"nc\">.dots</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-image</span><span class=\"p\">:</span> \n    <span class=\"nf\">radial-gradient</span><span class=\"p\">(</span><span class=\"nb\">transparent</span> <span class=\"m\">30%</span><span class=\"o\">,</span> <span class=\"nf\">rgba</span><span class=\"p\">(</span><span class=\"nf\">darken</span><span class=\"p\">(</span><span class=\"nv\">$color</span><span class=\"o\">,</span> <span class=\"m\">35%</span><span class=\"p\">)</span><span class=\"o\">,</span> <span class=\"m\">0</span><span class=\"mi\">.7</span><span class=\"p\">)</span> <span class=\"m\">70%</span><span class=\"p\">);</span>\n    <span class=\"nl\">background-size</span><span class=\"p\">:</span> <span class=\"m\">10px</span> <span class=\"m\">10px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Finally, I used animation to create the flickering effect:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hJPmfEpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0fuv44ty5zmvyng8m95.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--hJPmfEpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0fuv44ty5zmvyng8m95.gif\" alt=\"Alt Text\" loading=\"lazy\"></a><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code><span class=\"nc\">.light</span> <span class=\"p\">{</span>\n  <span class=\"nl\">animation</span><span class=\"p\">:</span> <span class=\"n\">flicker</span> <span class=\"m\">0</span><span class=\"mi\">.2s</span> <span class=\"n\">infinite</span> <span class=\"m\">0</span><span class=\"mi\">.3s</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">@keyframes</span> <span class=\"nt\">flicker</span> <span class=\"p\">{</span>\n  <span class=\"nt\">0</span><span class=\"nv\">%</span> <span class=\"p\">{</span><span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"p\">}</span>\n  <span class=\"nt\">80</span><span class=\"nv\">%</span> <span class=\"p\">{</span><span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"mi\">.8</span><span class=\"p\">}</span>\n  <span class=\"nt\">100</span><span class=\"nv\">%</span> <span class=\"p\">{</span><span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"controlling-the-color-through-a-variable\" href=\"#controlling-the-color-through-a-variable\">\n  </a>\n  Controlling The Color Through A Variable\n</h2>\n\n<p>As this pen gained popularity, some people asked to see it in different colors. Initially, I had hardcoded colors throughout my CSS, so I changed those to SASS variables for simple configuration. </p>\n\n<p>However, I wanted the main color to be easily configurable, so having multiple color variables wasn't good enough. I needed to control all of the colors &amp; shading through a single variable.</p>\n\n<p>In order to achieve that, I used SASS's built-in color functions: <code>lighten()</code>, <code>darken()</code> and <code>adjust-hue()</code> (<a href=\"https://sassme.jim-nielsen.com/\">SassMe</a> is a nice tool for visualizing the output of these functions).</p>\n\n<p><code>lighten()</code> and <code>darken()</code> are pretty self-explanatory. They make a given color lighter or darker based on the given percentage. For example, <code>lighten(black, 50%)</code> will mix black with 50% white, producing a gray color.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_9h9AfTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpcueqfb761gqw3bjsq3.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--_9h9AfTF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpcueqfb761gqw3bjsq3.png\" alt=\"Making a color lighter using SASS lighten(), visualized by https://sassme.jim-nielsen.com/\" loading=\"lazy\"></a></p>\n\n<p>However, for the LED light, <code>lighten()</code> and <code>darken()</code> were not enough, since the center of the light was orange, while the surroundings were red. That's not a different color shade, it's a different color altogether.</p>\n\n<p>That's where <code>adjust-hue()</code> comes in handy. It lets you change the color's hue property by a given degree.</p>\n\n<p>A color's hue is the color's position on the color wheel and can be represented by a single numerical value, usually in degrees (0 - 360). </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GHRDu6Ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtrqummd7kuouewfjsor.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GHRDu6Ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtrqummd7kuouewfjsor.png\" alt=\"Color hue scale\" loading=\"lazy\"></a></p>\n\n<p>So I used <code>adjust-hue()</code> to \"rotate\" the color's hue property 35 degrees to the right:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight scss\"><code><span class=\"nt\">adjust-hue</span><span class=\"o\">(</span><span class=\"err\">$</span><span class=\"nt\">color</span><span class=\"o\">,</span> <span class=\"nt\">35</span><span class=\"o\">)</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Producing this:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--i5qYe0o5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq2yqhevam3gr0kmpsc1.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--i5qYe0o5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq2yqhevam3gr0kmpsc1.png\" alt=\"Adjusting the color's hue property using SASS adjust-hue(), visualized by https://sassme.jim-nielsen.com/\" loading=\"lazy\"></a></p>\n\n<p>So if the color is red, to rotated color will be orange. But if the color is green the rotated color becomes blue!</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--msZZVp6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1zd8wy34unwlvfsc69m.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--msZZVp6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1zd8wy34unwlvfsc69m.png\" alt=\"Adjusting the color's hue property using SASS adjust-hue(), visualized by https://sassme.jim-nielsen.com/\" loading=\"lazy\"></a></p>\n\n<p>So now, you can control all the colors in the switch via a single variable <code>$color</code>:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eOTxJGmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mraymky496rsk8zlz2ri.gif\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--eOTxJGmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mraymky496rsk8zlz2ri.gif\" alt=\"Changing the switch main color\" loading=\"lazy\"></a></p>\n\n<h2>\n  <a name=\"summary\" href=\"#summary\">\n  </a>\n  Summary\n</h2>\n\n<p>This tutorial turned out to be a bit longer than I anticipated, and it may appear a bit overwhelming at first to see all the different techniques and tricks that were used for making this switch. But when you break it down to its basic elements, these techniques are pretty simple to comprehend. </p>\n\n<p>I hope I was able to provide some insight into the development process, and I hope you learned some new CSS techniques.</p>\n\n","body_markdown":"I created this pen last week after stumbling across this [3D Red Switch](https://dribbble.com/shots/14172039-3D-Red-Switch) design on Dribble. Since then it gained a lot of popularity (much more than I have anticipated!), and a few people have asked me to write a tutorial about how I made it. \n\nI've used various different CSS techniques in the making of this, including gradients, 3D transformations, animations, and transitions. In this tutorial, I will go over some of these techniques in depth.\n\n## Simulating a State\n\nThis is probably the oldest trick in the book. A switch has 2 states - on and off, but CSS has no way of maintaining such a state.\n\nTo solve this, we can use one of the native HTML elements. Since we only need to maintain 2 states, a **checkbox** element is a great choice. We can use the `:checked` CSS selector to apply CSS based on whether the checkbox is checked or not.\n\nWe wrap the whole thing in a `<label/>` to link the click event of the entire element to the **checkbox**, and we hide the checkbox itself using CSS.\n\n```html\n<label class=\"switch\">\n  <input type=\"checkbox\" checked/>\n</label>\n```\n```scss\n.switch {\n  input {\n    display: none;\n  }\n}\n```\n\nOne issue with this is that we can't apply CSS to the `<label/>` itself based on the checkbox state, since there's no \"ancestor selector\" in CSS. Because of that, I placed all the switch elements after the **checkbox** and used the adjacent sibling selector (`+`) to apply CSS to them.\n\n```html\n<label class=\"switch\">\n  <input type=\"checkbox\" checked/>\n  <div class=\"button\"></div>\n</label>\n```\n```scss\n.switch {\n  input {\n    display: none;\n    \n    &:checked + .button {\n      // Apply some CSS to .button when the checkbox is checked\n    }\n  }\n}\n```\n\nIf you need to simulate an element with more than 2 states, you can use other HTML elements like **radio buttons** (`<input type=\"radio\"/>`). Some people take this technique to the next level and create an entire game using CSS only! Check out this [collection of pure CSS games](https://codepen.io/collection/AKkZro) on CodePen for some inspiration.\n\n## Making The Black Frame\n\n![Making the black frame using CSS box-shadow](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxy24397o0m5ubyd5dxq.png)\n\nI used `box-shadow` to simulate the button's frame. `box-shadow` is a very powerful CSS property, because it allows you to stack multiple shadow effects separated by a comma.\n\nI used a set of 5 shadow effects to create the frame, and a `border-radius` property to make the shadow round in the corners. Here's the breakdown:\n\n```scss\n.switch {\n  border-radius: 5px;\n  box-shadow: \n    0 0 10px 2px rgba(black, 0.2), // The surrounding shadow (first layer)\n    0 0 1px 2px black, // The surrounding shadow (second layer)\n    inset 0 2px 2px -2px white, // The top white \"shine\"\n    inset 0 0 2px 15px #47434c, // The light gray frame\n    inset 0 0 2px 22px black; // The internal black shadow\n}\n```\n\n## Making The 3D Button Shape\n\nI used CSS transformations and transitions to make the button appear 3-dimensional.\n\nThe button itself is made of 3 divs (1 div and 2 pseudo-elements to be precise), that are perpendicular to each other, as illustrated below:\n\n![Making a 3D red switch using CSS](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df8n9mxk6gwk2f39swsj.jpg)\n\n```scss\n.button {\n  &::before {\n    height: 50px;\n    width: 100%;\n    transform: rotateX(-90deg);\n  }\n  &::after {\n    height: 50px;\n    width: 100%;\n    transform: translateY(50px) rotateX(-90deg);\n  }\n}\n```\n\nThen, I rotated the entire button 25 degrees, and used `transform-origin` to set the pivot point away from the div, to make the button appear as if it is rotating around some point deeper inside the button, rather than around the div:\n\n![Making a 3D red switch using CSS](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mjve0r7zy30xiwcij0df.jpg)\n\n```scss\n.switch {\n  perspective: 700px;\n\n  .button {\n    $rotation: 25deg;\n    $pivot-distance: 20px;\n    transform-origin: center center -#{$pivot-distance};\n     transform: translateZ($pivot-distance) rotateX(-$rotation);\n    transform-style: preserve-3d;\n  }\n}\n```\n\n## Making The Animation\n\nI used CSS transitions to rotate the switch back and forth. I wanted the transition to appear realistic, by starting slowly and ending quickly. I could've used one of the native easing functions, like `ease-in`, but that wasn't producing the right animation, so I used a custom `cubic-bezier()` easing function instead:\n\n```\ntransition: all 0.3s cubic-bezier(1, 0, 1, 1);\n```\n\n![Chrome DevTools transition cubic-bezier easing](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb8h5909sy6hgx1fuu7u.png)\n\nThis curve means that the transition starts slowly, and ends quickly, just like a real switch that slowly turns until it \"clicks\" towards the end.\n\n## Making The I/O Characters\n\n![Making the I/O characters using CSS gradients](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t8427wnzotib5mqne1e0.png)\n\nThere are multiple tricks I could've used to create the I/O characters. I could've used real letters and apply styling to them, or use a special font. But since those are pretty simple characters to draw, I decided to use gradients to make them.\n\nCSS gradients are amazing, but I had no idea how powerful they are until I came across this great article about [CSS Drawings](https://css-tricks.com/drawing-images-with-css-gradients/). \n\nThe true power of gradients comes from the fact that they are considered as \"images\" by CSS, and therefore can benefit from the power of the `background` property. backgrounds in CSS can not only be stacked (like shadows), but they can also have custom position and size!\n\nThis means that you can do pretty much *everything* with CSS gradients. If you want to understand just how far you can take it, check out https://a.singlediv.com/ (every art piece on that site is made with a single div).\n\nThe syntax is pretty simple:\n\n```css\nbackground: <image> <position> / <size>\n```\n\nYou can stack multiple gradients with commas, and add `background-repeat: no-repeat` to prevent the gradients from repeating:\n\n```css\n.image {\n  background:\n    <image> <position> / <size>,\n    <image> <position> / <size>,\n    <image> <position> / <size>;\n  background-repeat: no-repeat;\n}\n```\n\nI made the characters using a background with 2 gradients.\nFor the \"I\" character, I used an all-white `linear-gradient()`, and made it narrow and long. For the \"O\" character I used a `radial-gradient()` with 4 color stops, from transparent to white and back to transparent.\n\n```scss\nbackground:\n  linear-gradient(white, white) 50% 20% / 5% 20%, // White vertical line (\"I\")\n  radial-gradient(circle, transparent 50%, white 52%, white 70%, transparent 72%) 50% 80% / 33% 25%; // White circle (\"O\")\n```\n\nIf you take a look at the `radial-gradient()`, you'll notice that there's a `2%` gap between each color stop:\n\n```css\nradial-gradient(\n  transparent 50%, \n  white 52%, \n  white 70%, \n  transparent 72%\n)\n```\n\nThis makes the different colors blend together, instead of having a crisp, pixelated transition. To illustrate this, take a look at the image below:\n\n![CSS gradients - blending colors between color stops](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5kp97c5yd6l7bjmdldm.jpg)\n\nThis is an inherent CSS gradient behavior - it creates a smooth blend between the colors when there's a gap between the color stops.\n\n## Making The \"LED\" Gradient\n\n![Making the LED light using CSS gradients and animations](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzcrsdnvaao8vd70ukpx.jpg)\n\nAs seen in the picture above, I stacked 2 gradients to achieve a look of an LED bulb hidden behind a semi-transparent red plastic with small round bumps on it.\n\nI had to use 2 elements, one for each gradient, since the first gradient had to be none-repeating, and the second one had to be repeating. Additionally, I wanted to make the light \"flicker\", so I had to separate them.\n\nThe first element is the `.light` element, where I used a `radial-gradient()` to illustrate a red LED light, with a brighter center (the center is orange, while the surroundings are red).\n\n```scss\n.light {\n  background-image: radial-gradient(\n    adjust-hue(lighten($color, 20%), 35), // Orange\n    $color 40%, // Red\n    transparent 70%\n  );\n}\n```\n\n> Don't be alarmed by `adjust-hue()` and `lighten()`, I will cover those in the next part. For now, just consider them as hex colors.\n\nThe second element is the `.dots` element, where I used a repeating `radial-gradient()` with a transparent center to create a matrix of round-shaped bumps.\n\n```scss\n.dots {\n  background-image: \n    radial-gradient(transparent 30%, rgba(darken($color, 35%), 0.7) 70%);\n    background-size: 10px 10px;\n}\n```\n\nFinally, I used animation to create the flickering effect:\n\n![Alt Text](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0fuv44ty5zmvyng8m95.gif)\n\n```scss\n.light {\n  animation: flicker 0.2s infinite 0.3s;\n}\n\n@keyframes flicker {\n  0% {opacity: 1}\n  80% {opacity: 0.8}\n  100% {opacity: 1}\n}\n```\n\n## Controlling The Color Through A Variable\n\nAs this pen gained popularity, some people asked to see it in different colors. Initially, I had hardcoded colors throughout my CSS, so I changed those to SASS variables for simple configuration. \n\nHowever, I wanted the main color to be easily configurable, so having multiple color variables wasn't good enough. I needed to control all of the colors & shading through a single variable.\n\nIn order to achieve that, I used SASS's built-in color functions: `lighten()`, `darken()` and `adjust-hue()` ([SassMe](https://sassme.jim-nielsen.com/) is a nice tool for visualizing the output of these functions).\n\n`lighten()` and `darken()` are pretty self-explanatory. They make a given color lighter or darker based on the given percentage. For example, `lighten(black, 50%)` will mix black with 50% white, producing a gray color.\n\n![Making a color lighter using SASS lighten(), visualized by https://sassme.jim-nielsen.com/](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpcueqfb761gqw3bjsq3.png)\n\nHowever, for the LED light, `lighten()` and `darken()` were not enough, since the center of the light was orange, while the surroundings were red. That's not a different color shade, it's a different color altogether.\n\nThat's where `adjust-hue()` comes in handy. It lets you change the color's hue property by a given degree.\n\nA color's hue is the color's position on the color wheel and can be represented by a single numerical value, usually in degrees (0 - 360). \n\n![Color hue scale](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtrqummd7kuouewfjsor.png)\n\nSo I used `adjust-hue()` to \"rotate\" the color's hue property 35 degrees to the right:\n\n```scss\nadjust-hue($color, 35)\n```\nProducing this:\n\n![Adjusting the color's hue property using SASS adjust-hue(), visualized by https://sassme.jim-nielsen.com/](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kq2yqhevam3gr0kmpsc1.png)\n\nSo if the color is red, to rotated color will be orange. But if the color is green the rotated color becomes blue!\n\n![Adjusting the color's hue property using SASS adjust-hue(), visualized by https://sassme.jim-nielsen.com/](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y1zd8wy34unwlvfsc69m.png)\n\nSo now, you can control all the colors in the switch via a single variable `$color`:\n\n![Changing the switch main color](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mraymky496rsk8zlz2ri.gif)\n\n## Summary\n\nThis tutorial turned out to be a bit longer than I anticipated, and it may appear a bit overwhelming at first to see all the different techniques and tricks that were used for making this switch. But when you break it down to its basic elements, these techniques are pretty simple to comprehend. \n\nI hope I was able to provide some insight into the development process, and I hope you learned some new CSS techniques.","user":{"name":"Yoav Kadosh","username":"ykadosh","twitter_username":null,"github_username":"ykadosh","website_url":"https://codepen.io/ykadosh","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--WuxoQnAs--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/578177/31be140b-5d2e-42b8-997d-0f2b13084227.jpg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--hIpbTF-3--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/578177/31be140b-5d2e-42b8-997d-0f2b13084227.jpg"},"readingTime":"9 min read"}},"__N_SSG":true}