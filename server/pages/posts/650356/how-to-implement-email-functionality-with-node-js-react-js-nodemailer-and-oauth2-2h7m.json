{"pageProps":{"post":{"type_of":"article","id":650356,"title":"How to implement email functionality with Node.js, React.js, Nodemailer, and OAuth2","description":"Nodemailer is a Node.js module that allows users to send messages directly to your email. Th...","readable_publish_date":"Mar 30","slug":"how-to-implement-email-functionality-with-node-js-react-js-nodemailer-and-oauth2-2h7m","path":"/jlong4223/how-to-implement-email-functionality-with-node-js-react-js-nodemailer-and-oauth2-2h7m","url":"https://dev.to/jlong4223/how-to-implement-email-functionality-with-node-js-react-js-nodemailer-and-oauth2-2h7m","comments_count":16,"public_reactions_count":213,"collection_id":null,"published_timestamp":"2021-03-30T20:06:28Z","positive_reactions_count":213,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--FRiNICJY--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cj95p5r4pxu38k8g3uvg.jpeg","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--bJLIs7Wc--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cj95p5r4pxu38k8g3uvg.jpeg","canonical_url":"https://dev.to/jlong4223/how-to-implement-email-functionality-with-node-js-react-js-nodemailer-and-oauth2-2h7m","created_at":"2021-03-30T18:51:22Z","edited_at":null,"crossposted_at":null,"published_at":"2021-03-30T20:06:28Z","last_comment_at":"2021-10-16T17:49:18Z","reading_time_minutes":11,"tag_list":["react","node","javascript","nodemailer"],"tags":["react","node","javascript","nodemailer"],"body_html":"<h4>\n  <a name=\"nodemailer-is-a-nodejs-module-that-allows-users-to-send-messages-directly-to-your-email-this-article-is-a-guide-to-help-you-connect-your-nodejs-server-to-your-gmail-account-by-using-oauth2-in-addition-to-creating-a-reactjs-form-to-send-an-email\" href=\"#nodemailer-is-a-nodejs-module-that-allows-users-to-send-messages-directly-to-your-email-this-article-is-a-guide-to-help-you-connect-your-nodejs-server-to-your-gmail-account-by-using-oauth2-in-addition-to-creating-a-reactjs-form-to-send-an-email\">\n  </a>\n  Nodemailer is a Node.js module that allows users to send messages directly to your email. This article is a guide to help you connect your Node.js server to your GMail account by using OAuth2 in addition to creating a React.js Form to send an email.\n</h4>\n\n<h5>\n  <a name=\"steps\" href=\"#steps\">\n  </a>\n  Steps:\n</h5>\n\n<ul>\n<li>Set up the Node.js Server</li>\n<li>Set up Nodemailer part 1</li>\n<li>Configure OAuth2</li>\n<li>Set up Nodemailer part 2</li>\n<li>Set up Nodemailer part 3</li>\n<li>Set up React.js</li>\n<li>Set up Nodemailer part 4 </li>\n<li>Finish React</li>\n</ul>\n\n<p>To successfully go through this article, you need to have node and npm installed on your device, a code editor, as well as a basic understanding of Node.js and React.js. This guide does go back and forth between the backend, OAuth2, and frontend, so bare with me! </p>\n\n<p>To check for node and npm versions on your system, run the following commands to retrieve the version numbers:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>node -v\nv15.9.0\nnpm -v\n7.5.3\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"setting-up-the-nodejs-server\" href=\"#setting-up-the-nodejs-server\">\n  </a>\n  Setting up the Node.js server\n</h3>\n\n<p>If you have node and npm installed, let’s get started.</p>\n\n<p>Create a directory for your project. For this we will be using nodemailerAPI.<br>\n<code>mkdir nodemailerAPI</code></p>\n\n<p>Go into your new <code>nodemailerAPI</code> directory and create a <code>server.js</code> file, which will serve as our main file.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>cd nodemailerAPI\ntouch server.js\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>In the terminal, run the following command to initialize a package.json file:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm init -y\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now let’s install the packages that we will need.<br>\nFor this project, we will be using <code>Express.js, Nodemailer, and Dotenv</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm i express nodemailer dotenv\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><em>Time for some node.js coding!</em></p>\n\n<p>We are going to require our packages and run our server using <code>Express.js</code>. Open your directory in your code editor and input the following code:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const express = require(\"express\");\nconst nodemailer = require(\"nodemailer\");\nconst app = express();\nrequire(\"dotenv\").config();\n\nconst port = 3001;\napp.listen(port, () =&gt; {\n console.log(`Server is running on port: ${port}`);\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Once the above code is inputted, you will be able to run your server with the following command and see the console.log:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>node server.js\nServer is running on port: 3001\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Our server is now running, which is great news! Let’s stop the server for now with <code>control-c</code> and move on to our next step, setting up NodeMailer.</p>\n\n<h3>\n  <a name=\"setting-up-nodemailer\" href=\"#setting-up-nodemailer\">\n  </a>\n  Setting up NodeMailer\n</h3>\n\n<p>Nodemailer requires 3 things to begin running:</p>\n\n<ol>\n<li>A transporter object</li>\n<li>A mailOptions Object</li>\n<li>A sendMail method</li>\n</ol>\n\n<h4>\n  <a name=\"step-1-lets-setup-the-transporter-object\" href=\"#step-1-lets-setup-the-transporter-object\">\n  </a>\n  Step 1: Lets setup the transporter object:\n</h4>\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>let transporter = nodemailer.createTransport({\n service: \"gmail\",\n auth: {\n   type: \"OAuth2\",\n   user: process.env.EMAIL,\n   pass: process.env.WORD,\n   clientId: process.env.OAUTH_CLIENTID,\n   clientSecret: process.env.OAUTH_CLIENT_SECRET,\n   refreshToken: process.env.OAUTH_REFRESH_TOKEN,\n },\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><em>Important Note: The user and pass keys are your own email and your email password. We will be getting the clientId, clientSecret, and refreshToken as soon as we set up OAuth2.</em></p>\n\n<p>As you can see, storing these variables in a <code>.env</code> file are incredibly important to your privacy, so lets create a <code>.env</code> file to store our auth values:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>touch .env\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Within the <code>.env</code> file, input the following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>EMAIL=youremail@gmail.com\nWORD=youremailpassword\nOAUTH_CLIENTID=\nOAUTH_CLIENT_SECRET=\nOAUTH_REFRESH_TOKEN=\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Before moving on to step two in the NodeMailer process, let's set up OAuth2 and get those other values!</p>\n\n<h3>\n  <a name=\"configuring-oauth2\" href=\"#configuring-oauth2\">\n  </a>\n  Configuring OAuth2\n</h3>\n\n<p>Click the following link to go to your <a href=\"https://console.cloud.google.com/home\">Google Cloud Platform</a> dashboard. Near the top left, you will see a dropdown arrow. Once you click it, a project info modal will come up. </p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cM_q1whQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lJuW6s7.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--cM_q1whQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/lJuW6s7.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>On the popup modal, select the new project option. <br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--udLEnrwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GvWGLNp.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--udLEnrwb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/GvWGLNp.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>After clicking the new project button, you will see a new screen with a form to name your new project. For this project, we will be using <code>nodemailerAPI</code> and you can skip the location input box. Click create.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lUdSFLYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JyGJaQ0.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lUdSFLYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JyGJaQ0.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>After you click create, it will generate your new project and you will be redirected back to your dashboard.</p>\n\n<p>On the same drop down(top left) as where you went to create the new project, you will be able to see your new project, which you can now select. </p>\n\n<p>Once selected, open the top-left nav menu and select the following:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gaKdFJjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Z42dhkh.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gaKdFJjM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Z42dhkh.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>Once you click the OAuth consent screen, you will be brought to the following page, where you will click external:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PnzngisI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/LO59lRR.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--PnzngisI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/LO59lRR.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>After clicking create, you will be taken to a new page where you are required to fill in information regarding your newly created project: <br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SI-6RVyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/iXzJpJP.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SI-6RVyv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/iXzJpJP.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>Once you have filled in the above information and click save &amp; continue, you will see the Scopes phase of the OAuth configuration. <em>This page can be skipped so click save and continue here.</em> </p>\n\n<p>The next page is where you will add yourself as the test user:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QxE6pHMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jLvADnZ.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--QxE6pHMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jLvADnZ.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>Add yourself as a test user using your gmail and then click save and continue. The next page will be a summary of all of the inputted information, which is the end of that phase. </p>\n\n<p>Next, click credentials on the left hand side, then click create credentials and select OAuth client ID:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xGa-ArMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/njlSsI7.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xGa-ArMk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/njlSsI7.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>You will be redirected to the following page, where you create an OAuth clientID:<br>\nChange the application type to Web Application. We will be using OAuth2 Playground <a href=\"https://developers.google.com/oauthplayground\">https://developers.google.com/oauthplayground</a> as the Authorized redirect URI:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MVyuJx4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BHUlngN.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--MVyuJx4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/BHUlngN.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>Once those fields are inputted, you can click create. </p>\n\n<p>Next, you will be presented with your OAuth clientID and Client Secret:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3Rye9aW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RpAwtFV.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3Rye9aW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RpAwtFV.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>Copy both of those values and return to your <code>.env</code> file to fill in those empty keys.</p>\n\n<p>Now you should only be missing one key-value: <code>OAUTH_REFRESH_TOKEN</code>, so let's go get it. </p>\n\n<p>Head to the <a href=\"https://developers.google.com/oauthplayground/\">OAuth Playground</a>. Once there, click the gear on the upper right hand side of the screen to bring up the configuration. Click <code>Use your own OAuth credentials</code> and input the Client ID and Secret that you just inputted into your <code>.env</code> file. <br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yMmRtRVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/iQegJRB.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yMmRtRVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/iQegJRB.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>On the left hand side of the screen, you will see a large list of API’s. Select Gmail API v1 and the first option under the dropdown:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4DjCerol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2dynAgj.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--4DjCerol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2dynAgj.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>Click authorize API’s on the bottom right. This will bring you to a popup to select your gmail account. Choose your account and select continue on the next page.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GDTvYPlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nlyD3AZ.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--GDTvYPlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/nlyD3AZ.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>Then, a new popup will come up and ask for you to grant your app permission to send email from your gmail. Click allow here.</p>\n\n<p>After you click allow, you will be redirected back to the OAuth playground dashboard. Click <code>exchange authorization code for tokens</code> to receive your refresh token for your <code>.env</code> file:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--kzkUwVtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6ayzGud.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--kzkUwVtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6ayzGud.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>Our OAuth2 configuration is done, so lets head back to node. </p>\n<h3>\n  <a name=\"nodemailer-step-2\" href=\"#nodemailer-step-2\">\n  </a>\n  NodeMailer Step 2:\n</h3>\n\n<p>By now, you should have all of your key-value pairs filled out within your <code>.env</code> file. Let's verify the transporter underneath the created transporter from Nodemailer step 1.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>transporter.verify((err, success) =&gt; {\n err\n   ? console.log(err)\n   : console.log(`=== Server is ready to take messages: ${success} ===`);\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Within the terminal, run the server again and check for the console.log:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>node server.js \nServer is running on port: 3001\n=== Server is ready to take messages: true ===\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We get true! <em>Very exciting</em></p>\n\n<p>Underneath the verification, lets create a test <code>mailOptions</code> object:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>let mailOptions = {\n from: \"test@gmail.com\",\n to: process.env.EMAIL,\n subject: \"Nodemailer API\",\n text: \"Hi from your nodemailer API\",\n};\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"nodemailer-step-3\" href=\"#nodemailer-step-3\">\n  </a>\n  Nodemailer Step 3:\n</h3>\n\n<p>Next, lets send the <code>mailOptions</code> through a <code>transporter sendMail</code> method:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>transporter.sendMail(mailOptions, function (err, data) {\n if (err) {\n   console.log(\"Error \" + err);\n } else {\n   console.log(\"Email sent successfully\");\n }\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now, lets run the server again and within the terminal, you will see:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>node server.js \nServer is running on port: 3001\n=== Server is ready to take messages: true ===\nEmail sent successfully\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Check your email as it will be there!</p>\n\n<p><em>Checkout the full server.js code at this point:</em><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const express = require(\"express\");\nconst nodemailer = require(\"nodemailer\");\nconst app = express();\nrequire(\"dotenv\").config();\n\nlet transporter = nodemailer.createTransport({\n service: \"gmail\",\n auth: {\n   type: \"OAuth2\",\n   user: process.env.EMAIL,\n   pass: process.env.WORD,\n   clientId: process.env.OAUTH_CLIENTID,\n   clientSecret: process.env.OAUTH_CLIENT_SECRET,\n   refreshToken: process.env.OAUTH_REFRESH_TOKEN,\n },\n});\n\ntransporter.verify((err, success) =&gt; {\n err\n   ? console.log(err)\n   : console.log(`=== Server is ready to take messages: ${success} ===`);\n});\n\nlet mailOptions = {\n from: \"test@gmail.com\",\n to: process.env.EMAIL,\n subject: \"Nodemailer API\",\n text: \"Hi from your nodemailer API\",\n};\n\ntransporter.sendMail(mailOptions, function (err, data) {\n if (err) {\n   console.log(\"Error \" + err);\n } else {\n   console.log(\"Email sent successfully\");\n }\n});\n\nconst port = 3001;\napp.listen(port, () =&gt; {\n console.log(`Server is running on port: ${port}`);\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>As of now, there is no way to access nodemailer from the frontend as we do not have a route established. So let’s create that route. </p>\n\n<p>Our <code>transporter.sendMail</code> is already set up so this will be fast! All we are doing is taking the <code>transporter.sendMail</code> and placing it inside of a function that is attached to a route. We have also attached a response action to send a status back, which will help determine the success in a later cURL test.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>app.post(\"/send\", function (req, res) {\n let mailOptions = {\n   from: \"test@gmail.com\",\n   to: process.env.EMAIL,\n   subject: \"Nodemailer API\",\n   text: \"Hi from your nodemailer API\",\n };\n\n transporter.sendMail(mailOptions, function (err, data) {\n   if (err) {\n     console.log(\"Error \" + err);\n   } else {\n     console.log(\"Email sent successfully\");\n     res.json({ status: \"Email sent\" });\n   }\n });\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Let’s test this new route using cURL. </p>\n\n<p>With your <code>nodemailerAPI</code> server running, open up your terminal, and run the following command in a new terminal tab:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>curl -d -url http://localhost:3001/send\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>After running the cURL  command, you will see our response come back in the terminal:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>{\"status\":\"Email sent\"}\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>You should see an email in your inbox; Our route is now ready to use on the front-end(kindof)!</p>\n\n<p>======================================================</p>\n\n<h2>\n  <a name=\"setup-reactjs\" href=\"#setup-reactjs\">\n  </a>\n  Setup React.js\n</h2>\n\n<h4>\n  <a name=\"react-setup-step-1\" href=\"#react-setup-step-1\">\n  </a>\n  React Setup Step 1:\n</h4>\n\n<p>Lets head back to your terminal to create the new react project, which we will call <code>nodemailer-form</code>  by running the following command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npx create-react-app nodemailer-form\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Open this new react directory in your code editor and within <code>src/App.js</code>, you will see the default react code that comes with create-react-app. Let’s remove all of it except for the top level <code>div</code>:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5SffV7Rx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pZpwsd5.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5SffV7Rx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pZpwsd5.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>For the purpose of this guide, we will only be coding within <code>App.js</code>, which is now blank and ready for us to get to work. </p>\n\n<h4>\n  <a name=\"import-amp-setup-the-usestate-hook\" href=\"#import-amp-setup-the-usestate-hook\">\n  </a>\n  Import &amp; setup the useState Hook\n</h4>\n\n<p>At the top line of <code>App.js</code>, import useState like so:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>import { useState } from \"react\";\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Our <code>nodemailerAPI</code> will be looking for a name, email, and message when sending an email. So, let’s set up our <code>useState</code> to reflect that:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const [mailerState, setMailerState] = useState({\n   name: \"\",\n   email: \"\",\n   message: \"\",\n });\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now let's set up a function to handle the change when we type into our future input boxes.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>function handleStateChange(e) {\n   setMailerState((prevState) =&gt; ({\n     ...prevState,\n     [e.target.name]: e.target.value,\n   }));\n }\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Next, let’s create a form and attach the <code>handleStateChange</code> to each input box as well as the name and value.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>return (\n   &lt;div className=\"App\"&gt;\n     &lt;form&gt;\n       &lt;fieldset&gt;\n         &lt;legend&gt;React NodeMailer Contact Form&lt;/legend&gt;\n         &lt;input\n           placeholder=\"Name\"\n           onChange={handleStateChange}\n           name=\"name\"\n           value={mailerState.name}\n         /&gt;\n         &lt;input\n           placeholder=\"Email\"\n           onChange={handleStateChange}\n           name=\"email\"\n           value={mailerState.email}\n         /&gt;\n         &lt;textarea\n           placeholder=\"Message\"\n           onChange={handleStateChange}\n           name=\"message\"\n           value={mailerState.message}\n         /&gt;\n  &lt;button&gt;Send Message&lt;/button&gt;\n       &lt;/fieldset&gt;\n     &lt;/form&gt;\n   &lt;/div&gt;\n );\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>If you run your react project with <code>npm start</code> and view your project on <code>localhost:3000</code>, it is going to be one of the ugliest forms you’ve ever seen. Let’s do a quick fix and add some inline styles to make it sort of look like a contact form:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;div className=\"App\"&gt;\n     &lt;form\n       style={{\n         display: \"flex\",\n         height: \"100vh\",\n         justifyContent: \"center\",\n         alignItems: \"center\",\n       }}\n     &gt;\n       &lt;fieldset\n         style={{\n           display: \"flex\",\n           flexDirection: \"column\",\n           justifyContent: \"center\",\n           width: \"50%\",\n         }}\n       &gt;\n         &lt;legend&gt;React NodeMailer Contact Form&lt;/legend&gt;\n         &lt;input\n           placeholder=\"Name\"\n           onChange={handleStateChange}\n           name=\"name\"\n           value={mailerState.name}\n         /&gt;\n         &lt;input\n           placeholder=\"Email\"\n           onChange={handleStateChange}\n           name=\"email\"\n           value={mailerState.email}\n         /&gt;\n         &lt;textarea\n           style={{ minHeight: \"200px\" }}\n           placeholder=\"Message\"\n           onChange={handleStateChange}\n           name=\"message\"\n           value={mailerState.message}\n         /&gt;\n         &lt;button&gt;Send Message&lt;/button&gt;\n       &lt;/fieldset&gt;\n     &lt;/form&gt;\n   &lt;/div&gt;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>At this point, your form should look like this:<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SBFU0VIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PKTglML.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--SBFU0VIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PKTglML.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>It is still not going to win any style contest(maybe in the 90’s), but at least it looks the part!</p>\n\n<p>It doesn't work yet so we need to get it to act the part too!<br>\nWe need to create a function that actually posts to the <code>nodemailerAPI</code> route and attach it to the form:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const submitEmail = async (e) =&gt; {\n   e.preventDefault();\n   console.log({ mailerState });\n   const response = await fetch(\"http://localhost:3001/send\", {\n     method: \"POST\",\n     headers: {\n       \"Content-type\": \"application/json\",\n     },\n     body: JSON.stringify({ mailerState }),\n   })\n     .then((res) =&gt; res.json())\n     .then(() =&gt; {\n       setMailerState({\n         email: \"\",\n         name: \"\",\n         message: \"\",\n       });\n     });\n };\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>&lt;form\n       style={{\n         display: \"flex\",\n         height: \"100vh\",\n         justifyContent: \"center\",\n         alignItems: \"center\",\n       }}\n       onSubmit={submitEmail}\n        &gt;\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now, our form should be good to go, or is it? If you have tried to submit the form, nothing is going to happen. If you are using Google Chrome and open up your console, you will see the following: <br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TfDz53En--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zEUlpVY.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TfDz53En--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zEUlpVY.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>Our <code>mailerState</code> is logging as expected but we are getting a <code>CORs error</code>. </p>\n\n<p>Remember earlier, I mentioned that our backend API route is <em>kind-of</em> ready? We have come to a point where we need to return to our API and fix a couple things.</p>\n<h3>\n  <a name=\"nodemailer-part-4\" href=\"#nodemailer-part-4\">\n  </a>\n  Nodemailer part 4\n</h3>\n\n<p>Let’s go back to our node server and install our last dependency: <code>CORs</code>. Within the nodemailer API directory, run the following command:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>npm i cors\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now, <code>require cors</code> at the top of your <code>server.js</code> file and tell the app to use cors as middleware. The top of your <code>server.js file</code> should look like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const express = require(\"express\");\nconst nodemailer = require(\"nodemailer\");\nconst app = express();\nconst cors = require(\"cors\");\nrequire(\"dotenv\").config();\n\n// middleware\napp.use(express.json());\napp.use(cors());\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>While we are on the backend, we need to change the <code>mail options</code> to reflect the request from our React side. </p>\n\n<p>Our current mail options looks like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>let mailOptions = {\n   from: \"test@gmail.com\",\n   to: process.env.EMAIL,\n   subject: \"Nodemailer API\",\n   text: \"Hi from your nodemailer API\",\n };\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>But this does us no good as this is what is sent every time this route is hit, so we need to change it to look like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>let mailOptions = {\n   from: `${req.body.mailerState.email}`,\n   to: process.env.EMAIL,\n   subject: `Message from: ${req.body.mailerState.email}`,\n   text: `${req.body.mailerState.message}`,\n };\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Lets also update the <code>transporter.sendMail</code> to send json back to react so we can alert the user of the email being sent:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>transporter.sendMail(mailOptions, function (err, data) {\n   if (err) {\n     res.json({\n       status: \"fail\",\n     });\n   } else {\n     console.log(\"== Message Sent ==\");\n     res.json({\n       status: \"success\",\n     });\n   }\n });\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>So, our final <code>server.js</code> file should look like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const express = require(\"express\");\nconst nodemailer = require(\"nodemailer\");\nconst app = express();\nconst cors = require(\"cors\");\nrequire(\"dotenv\").config();\n\n// middleware\napp.use(express.json());\napp.use(cors());\n\nlet transporter = nodemailer.createTransport({\n service: \"gmail\",\n auth: {\n   type: \"OAuth2\",\n   user: process.env.EMAIL,\n   pass: process.env.WORD,\n   clientId: process.env.OAUTH_CLIENTID,\n   clientSecret: process.env.OAUTH_CLIENT_SECRET,\n   refreshToken: process.env.OAUTH_REFRESH_TOKEN,\n },\n});\ntransporter.verify((err, success) =&gt; {\n err\n   ? console.log(err)\n   : console.log(`=== Server is ready to take messages: ${success} ===`);\n});\n\napp.post(\"/send\", function (req, res) {\n let mailOptions = {\n   from: `${req.body.mailerState.email}`,\n   to: process.env.EMAIL,\n   subject: `Message from: ${req.body.mailerState.email}`,\n   text: `${req.body.mailerState.message}`,\n };\n\n transporter.sendMail(mailOptions, function (err, data) {\n   if (err) {\n     res.json({\n       status: \"fail\",\n     });\n   } else {\n     console.log(\"== Message Sent ==\");\n     res.json({\n       status: \"success\",\n     });\n   }\n });\n});\n\nconst port = 3001;\napp.listen(port, () =&gt; {\n console.log(`Server is running on port: ${port}`);\n});\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Our <code>nodemailerAPI</code> part of the guide is complete. Lets tackle the last little bit of our <code>nodemailer-form</code> in React.</p>\n\n<h3>\n  <a name=\"back-to-our-form-in-react\" href=\"#back-to-our-form-in-react\">\n  </a>\n  Back to our form in React\n</h3>\n\n<p>We just need to update the <code>submitEmail</code> function to wait for the response. It is waiting for the backend to tell it if the status is a fail or if the status is a success and will give an alert accordingly.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight plaintext\"><code>const submitEmail = async (e) =&gt; {\n   e.preventDefault();\n   console.log({ mailerState });\n   const response = await fetch(\"http://localhost:3001/send\", {\n     method: \"POST\",\n     headers: {\n       \"Content-type\": \"application/json\",\n     },\n     body: JSON.stringify({ mailerState }),\n   })\n     .then((res) =&gt; res.json())\n     .then(async (res) =&gt; {\n       const resData = await res;\n       console.log(resData);\n       if (resData.status === \"success\") {\n         alert(\"Message Sent\");\n       } else if (resData.status === \"fail\") {\n         alert(\"Message failed to send\");\n       }\n     })\n     .then(() =&gt; {\n       setMailerState({\n         email: \"\",\n         name: \"\",\n         message: \"\",\n       });\n     });\n };\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>So when you try to send an email, you will get the following alert and you will see the status sent from the backend in the console: <br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WEj3OC-R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Xb0em5R.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--WEj3OC-R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Xb0em5R.png\" alt=\"\" loading=\"lazy\"></a></p>\n\n<p>By this point, you have successfully implemented Nodemailer with OAuth2, React.js, Node.js, and Express.js. Now you can enjoy adding this to your future projects!</p>\n\n","body_markdown":"Nodemailer with OAuth2, React.js, Node.js, and Express.js. Now you can enjoy adding this to your future projects!\n\n","user":{"name":"Jared Long ","username":"jlong4223","twitter_username":null,"github_username":"jlong4223","website_url":"https://www.jaredlong.dev/","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--93Dh_VvP--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/549746/ca588803-d452-4886-acac-d4e471f10a56.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--njAKayUq--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/549746/ca588803-d452-4886-acac-d4e471f10a56.png"},"readingTime":"14 min read"}},"__N_SSG":true}