{"pageProps":{"post":{"type_of":"article","id":650705,"title":"Why I stopped using Redux and Used Recoil Instead","description":"What's wrong with Redux?   Redux is not perfect, but it is by far the most popular state man...","readable_publish_date":"Mar 31","slug":"why-i-stopped-using-redux-and-used-recoil-instead-e6a","path":"/akashshyam/why-i-stopped-using-redux-and-used-recoil-instead-e6a","url":"https://dev.to/akashshyam/why-i-stopped-using-redux-and-used-recoil-instead-e6a","comments_count":31,"public_reactions_count":130,"collection_id":null,"published_timestamp":"2021-03-31T05:27:18Z","positive_reactions_count":130,"cover_image":null,"social_image":"https://dev.to/social_previews/article/650705.png","canonical_url":"https://dev.to/akashshyam/why-i-stopped-using-redux-and-used-recoil-instead-e6a","created_at":"2021-03-31T05:26:57Z","edited_at":"2021-05-06T10:08:53Z","crossposted_at":null,"published_at":"2021-03-31T05:27:18Z","last_comment_at":"2021-10-14T11:11:54Z","reading_time_minutes":4,"tag_list":["javascript","react","redux","recoil"],"tags":["javascript","react","redux","recoil"],"body_html":"<h3>\n  <a name=\"whats-wrong-with-redux\" href=\"#whats-wrong-with-redux\">\n  </a>\n  What's wrong with Redux?\n</h3>\n\n<p>Redux is not perfect, but it is by far the most popular state management library used with React. Let's look at what's not so great in redux:</p>\n\n<ul>\n<li><p>Giant Learning Curve<br>\nThere are so many concepts to learn like actions, action creator, reducers... and when we throw class based and functional components in the mix along with a different way of dispatching while using thunk etc, It can really scare a beginner</p></li>\n<li><p>Huge Amount of Boilerplate<br>\nEverytime we want to setup a redux app, we have to create reducers, combine them, create a store, add middleware, link to devtools, computed values etc. We need to add so many 3rd party libraries which have a config of their own and introduce another layer of complexity.</p></li>\n<li><p>Restructuring Folder Structure<br>\nThe react component based approach does not align itself very well with the redux way of splitting business logic. If we want to introduce redux into an existing react app, then we need to change the file structure and a lot of code has to be changed.</p></li>\n</ul>\n\n<h3>\n  <a name=\"context-api\" href=\"#context-api\">\n  </a>\n  Context API\n</h3>\n\n<p>The context API is not really a solution for this. It solves the prop drilling problem... not global application state. You cannot pass data across siblings using context. The child will have to update the parent which will update another child(the sibling).</p>\n\n<h3>\n  <a name=\"terminology-with-recoil\" href=\"#terminology-with-recoil\">\n  </a>\n  Terminology with Recoil\n</h3>\n\n<p>Unlike redux where we have so many concepts to understand... there are only a few in Recoil</p>\n\n<h5>\n  <a name=\"atom\" href=\"#atom\">\n  </a>\n  Atom\n</h5>\n\n<p>This is the easiest part of the terminology.... an atom is basically a piece of state</p>\n\n<h5>\n  <a name=\"selector\" href=\"#selector\">\n  </a>\n  Selector\n</h5>\n\n<p>A piece of state that is calculated on the basis of another atom(s) or selector(s)</p>\n\n<h3>\n  <a name=\"recoil\" href=\"#recoil\">\n  </a>\n  Recoil\n</h3>\n\n<p>Let's begin by installing recoil<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight shell\"><code>npm i recoil\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Whenever we want to use recoil, we need to have the <code>RecoilRoot</code> component somewhere in our component tree.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">RecoilRoot</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">root</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">RecoilRoot</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Recoil</span> <span class=\"nx\">Demo</span><span class=\"o\">&lt;</span><span class=\"sr\">/h1</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/RecoilRoot</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>When we want to create an <code>atom</code>, we use the <code>atom function</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">RecoilRoot</span><span class=\"p\">,</span> <span class=\"nx\">atom</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">recoil</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">counter</span> <span class=\"o\">=</span> <span class=\"nx\">atom</span><span class=\"p\">({</span>\n  <span class=\"na\">key</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">counter</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">default</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">0</span><span class=\"dl\">\"</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">RecoilRoot</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Recoil</span> <span class=\"nx\">Demo</span><span class=\"o\">&lt;</span><span class=\"sr\">/h1</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/RecoilRoot</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Each <code>atom()</code> takes in 2 fields:</p>\n\n<ol>\n<li><p><code>Key</code><br>\nThe key is the name our atom. It must be unique in our application and we use it to get the value of the atom.</p></li>\n<li><p><code>Default</code><br>\nThe <code>default</code> is the initial value of our atom</p></li>\n</ol>\n\n<p>We've created an atom but we'll also need to access it. We use the <code>useRecoilState</code> hook<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"nx\">React</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">react</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">RecoilRoot</span><span class=\"p\">,</span> <span class=\"nx\">useRecoilState</span><span class=\"p\">,</span> <span class=\"nx\">atom</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">root</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">counter</span> <span class=\"o\">=</span> <span class=\"nx\">atom</span><span class=\"p\">({</span>\n  <span class=\"na\">key</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">counter</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">default</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">0</span><span class=\"dl\">\"</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">App</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">number</span><span class=\"p\">,</span> <span class=\"nx\">setNumber</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useRecoilState</span><span class=\"p\">(</span><span class=\"nx\">counter</span><span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">RecoilRoot</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">h1</span><span class=\"o\">&gt;</span><span class=\"nx\">Recoil</span> <span class=\"nx\">Demo</span><span class=\"o\">&lt;</span><span class=\"sr\">/h1</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"nx\">button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setNumber</span><span class=\"p\">(</span><span class=\"nx\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)}</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">number</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/button</span><span class=\"err\">&gt;\n</span>    <span class=\"o\">&lt;</span><span class=\"sr\">/RecoilRoot</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>We pass in the <code>counter</code> atom to the <code>useRecoilState</code>. Very similar to the <code>useState</code> hook in react, <code>useRecoilState</code> also returns the value of the state and a function to set the state.</p>\n\n<p>I've added a simple button that shows the value of <code>number</code>. When we click on it, we increment the <code>number</code> state using the <code>setNumber()</code> function.</p>\n\n<p>This atom can be used in another component too. In case we only want to access the value of the <code>number</code> atom, we can use the <code>useRecoilHook</code>.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"kd\">function</span> <span class=\"nx\">Display</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">number</span> <span class=\"o\">=</span> <span class=\"nx\">useRecoilValue</span><span class=\"p\">(</span><span class=\"nx\">counter</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"o\">&lt;</span><span class=\"nx\">p</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">number</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"sr\">/p</span><span class=\"err\">&gt;\n</span><span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"derived-state\" href=\"#derived-state\">\n  </a>\n  Derived State\n</h3>\n\n<p>Let's begin by understanding what derived state actually is. It's a piece of state that is calculated on the basis of another state.</p>\n\n<p>It's very easy to do this in recoil. We can use the <code>selector()</code> function. A selector is a pure function that takes in atoms or other selectors. We'll cube the value of our counter.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight jsx\"><code><span class=\"kd\">const</span> <span class=\"nx\">cubed</span> <span class=\"o\">=</span> <span class=\"nx\">selector</span><span class=\"p\">({</span>\n  <span class=\"na\">key</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">cube</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">get</span><span class=\"p\">:</span> <span class=\"p\">({</span> <span class=\"kd\">get</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">counter</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">3</span>\n<span class=\"p\">})</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>The <code>key</code> field is nothing new... it specifies the name of our state, as I mentioned earlier, It must always be unique. The <code>get</code> field is where things get interesting. I agree it the syntax is complicated but this gives us a lot of power and expands the possibilities. Whenever an atom which the selector uses changes, the selector is recalculated Let's go through the code line by line.</p>\n\n<p>We are giving a function to the <code>get</code> field. Recoil passes an object into that, from this object we are destructuring the <code>get</code> field. The <code>get</code> field is a function that allows use to pass in the <code>key</code> of an atom or selector and access it's value. Then we are raising it to the power of <code>3</code>. Here we have used only one <code>atom</code> but we can use multiple atoms for computations.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"p\">{</span><span class=\"nx\">selector</span><span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">recoil</span><span class=\"dl\">'</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">cubed</span> <span class=\"o\">=</span> <span class=\"nx\">selector</span><span class=\"p\">({</span>\n  <span class=\"na\">key</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">totalPrice</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"na\">get</span><span class=\"p\">:</span> <span class=\"p\">({</span> <span class=\"kd\">get</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">numState</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">3</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h3>\n  <a name=\"folder-structure\" href=\"#folder-structure\">\n  </a>\n  Folder Structure\n</h3>\n\n<p>Let's say the we have 2 broad categories of state in our app: users and todos. All the atoms go in <code>/atoms</code> and the selectors go in <code>/selectors</code>. The atoms related to users will go in <code>/atoms/users.js</code>, the atoms related to todos will go in <code>/atoms/todos.js</code> and so on.</p>\n\n<p>That's all for now, thank you for reading until here. I hope you guys liked this post, if you did please like the post and follow me. Bye 👋</p>\n\n","body_markdown":"What's wrong with Redux?\nRedux is not perfect, but it is by far the most popular state management library used with React. Let's look at what's not so great in redux:\n\n* Giant Learning Curve\nThere are so many concepts to learn like actions, action creator, reducers... and when we throw class based and functional components in the mix along with a different way of dispatching while using thunk etc, It can really scare a beginner\n\n* Huge Amount of Boilerplate\nEverytime we want to setup a redux app, we have to create reducers, combine them, create a store, add middleware, link to devtools, computed values etc. We need to add so many 3rd party libraries which have a config of their own and introduce another layer of complexity.\n\n* Restructuring Folder Structure\nThe react component based approach does not align itself very well with the redux way of splitting business logic. If we want to introduce redux into an existing react app, then we need to change the file structure and a lot of code has to be changed.\n\n###Context API\nThe context API is not really a solution for this. It solves the prop drilling problem... not global application state. You cannot pass data across siblings using context. The child will have to update the parent which will update another child(the sibling).\n\n###Terminology with Recoil\nUnlike redux where we have so many concepts to understand... there are only a few in Recoil\n\n#####Atom\nThis is the easiest part of the terminology.... an atom is basically a piece of state\n\n#####Selector\nA piece of state that is calculated on the basis of another atom(s) or selector(s)\n\n\n###Recoil\nLet's begin by installing recoil\n\n```zsh\nnpm i recoil\n```\n\nWhenever we want to use recoil, we need to have the `RecoilRoot` component somewhere in our component tree.\n\n\n```js\nimport React from 'react';\nimport {RecoilRoot} from 'root';\n\nexport default function App() {\n  return (\n    <RecoilRoot>\n      <h1>Recoil Demo</h1>\n    </RecoilRoot>\n  )\n}\n```\n\nWhen we want to create an `atom`, we use the `atom function`.\n\n```js\nimport React from 'react';\nimport { RecoilRoot, atom } from 'recoil';\n\nconst counter = atom({\n  key: \"counter\",\n  default: \"0\"\n});\n\nexport default function App() {\n  return (\n    <RecoilRoot>\n      <h1>Recoil Demo</h1>\n    </RecoilRoot>\n  )\n}\n```\n\nEach `atom()` takes in 2 fields:\n\n1. `Key`\nThe key is the name our atom. It must be unique in our application and we use it to get the value of the atom.\n\n\n2. `Default`\nThe `default` is the initial value of our atom\n\nWe've created an atom but we'll also need to access it. We use the `useRecoilState` hook\n\n\n```js\nimport React from 'react';\nimport {RecoilRoot, useRecoilState, atom} from 'root';\n\nconst counter = atom({\n  key: \"counter\",\n  default: \"0\"\n});\n\nexport default function App() {\n  const [number, setNumber] = useRecoilState(counter);\n\n  return (\n    <RecoilRoot>\n      <h1>Recoil Demo</h1>\n      <button onClick={() => setNumber(number + 1)}>{number}</button>\n    </RecoilRoot>\n  )\n}\n```\n\nWe pass in the `counter` atom to the `useRecoilState`. Very similar to the `useState` hook in react, `useRecoilState` also returns the value of the state and a function to set the state.\n\nI've added a simple button that shows the value of `number`. When we click on it, we increment the `number` state using the `setNumber()` function.\n\nThis atom can be used in another component too. In case we only want to access the value of the `number` atom, we can use the `useRecoilHook`.\n\n```js\nfunction Display() {\n  const number = useRecoilValue(counter);\n  return <p>{number}</p>\n}\n```\n\n\n###Derived State\nLet's begin by understanding what derived state actually is. It's a piece of state that is calculated on the basis of another state.\n\nIt's very easy to do this in recoil. We can use the `selector()` function. A selector is a pure function that takes in atoms or other selectors. We'll cube the value of our counter.\n\n```jsx\nconst cubed = selector({\n  key: \"cube\",\n  get: ({ get }) => get(counter) ** 3\n})\n```\n\nThe `key` field is nothing new... it specifies the name of our state, as I mentioned earlier, It must always be unique. The `get` field is where things get interesting. I agree it the syntax is complicated but this gives us a lot of power and expands the possibilities. Whenever an atom which the selector uses changes, the selector is recalculated Let's go through the code line by line.\n\n\nWe are giving a function to the `get` field. Recoil passes an object into that, from this object we are destructuring the `get` field. The `get` field is a function that allows use to pass in the `key` of an atom or selector and access it's value. Then we are raising it to the power of `3`. Here we have used only one `atom` but we can use multiple atoms for computations. \n\n\n```js\nimport {selector} from 'recoil';\n\nconst cubed = selector({\n  key: \"totalPrice\",\n  get: ({ get }) => {\n    get(numState) ** 3\n  }\n})\n```\n\n###Folder Structure\nLet's say the we have 2 broad categories of state in our app: users and todos. All the atoms go in `/atoms` and the selectors go in `/selectors`. The atoms related to users will go in `/atoms/users.js`, the atoms related to todos will go in `/atoms/todos.js` and so on.\n\n\nThat's all for now, thank you for reading until here. I hope you guys liked this post, if you did please like the post and follow me. Bye 👋","user":{"name":"Akash Shyam","username":"akashshyam","twitter_username":"AkashShyam11","github_username":"akashshyamdev","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--HcFiU3xO--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/499259/11ca155a-637a-49cc-ae2d-69df31f0e321.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--stiEpx70--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/499259/11ca155a-637a-49cc-ae2d-69df31f0e321.png"},"readingTime":"5 min read"}},"__N_SSG":true}