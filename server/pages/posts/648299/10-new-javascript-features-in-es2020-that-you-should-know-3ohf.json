{"pageProps":{"post":{"type_of":"article","id":648299,"title":"10 New JavaScript Features in ES2020 That You Should Know","description":"I am starting this new series called Tip Tuesday in which I will write an article which includes some...","readable_publish_date":"Mar 30","slug":"10-new-javascript-features-in-es2020-that-you-should-know-3ohf","path":"/worldindev/10-new-javascript-features-in-es2020-that-you-should-know-3ohf","url":"https://dev.to/worldindev/10-new-javascript-features-in-es2020-that-you-should-know-3ohf","comments_count":16,"public_reactions_count":482,"collection_id":11989,"published_timestamp":"2021-03-30T06:28:48Z","positive_reactions_count":482,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--rcqKBJF6--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qprcp5cndrrjq6nt246h.jpeg","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--NhTN8uIn--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qprcp5cndrrjq6nt246h.jpeg","canonical_url":"https://dev.to/worldindev/10-new-javascript-features-in-es2020-that-you-should-know-3ohf","created_at":"2021-03-28T19:28:59Z","edited_at":"2021-05-07T15:27:11Z","crossposted_at":null,"published_at":"2021-03-30T06:28:48Z","last_comment_at":"2021-09-02T04:17:36Z","reading_time_minutes":4,"tag_list":[],"tags":[],"body_html":"<p>I am starting this new series called Tip Tuesday in which I will write an article which includes some tips &amp; tricks every Tuesday. So please follow me to stay updated!!</p>\n\n<p>Hey Devs, the new ES2020 features have been up for a while now, but not everybody knows them, so here are some cool features to try out!</p>\n\n<p><strong>It would be really helpful if you like, share and comment</strong></p>\n\n<p>Tip Tuesday - 30/3/2021</p>\n\n<h2>\n  <a name=\"1-bigint\" href=\"#1-bigint\">\n  </a>\n  1. BigInt\n</h2>\n\n<p>BigInt, one of the most anticipated features in JavaScript, is finally here. It actually allows developers to have a much greater integer representation in their JS code for data processing for data handling.</p>\n\n<p>At the moment the maximum number you can store as an integer in JavaScript is <code>pow(2, 53) - 1</code>. But BigInt actually allows you to go even beyond that.<br>\n<a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gE7kQ_DX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/588khrk3rpei76gho4e9.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--gE7kQ_DX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/588khrk3rpei76gho4e9.png\" alt=\"Code Image\" loading=\"lazy\"></a></p>\n\n<p>However, you need to have an <code>n</code> appended at the very end of the number, as you can see above. This <code>n</code> denotes that this is a BigInt and should be treated differently by the JavaScript engine (by the v8 engine).</p>\n\n<p>This improvement is not backward compatible because the traditional number system is IEEE754 (which cannot support numbers of this size).<br>\n<br></p>\n<h2>\n  <a name=\"2-dynamic-import\" href=\"#2-dynamic-import\">\n  </a>\n  2. Dynamic import\n</h2>\n\n<p>Dynamic imports in JavaScript give you the option to import JS files dynamically as modules in your application natively. This is just like how you do it with Webpack and Babel at the moment.</p>\n\n<p>This feature will help you ship on-demand-request code, better known as code splitting, without the overhead of webpack or other module bundlers. You can also conditionally load code in an if-else block if you like. The good thing is that you actually import a module, and so it never pollutes the global namespace.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0SMs7mC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utai4m6xcc1nk3aooqxf.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0SMs7mC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utai4m6xcc1nk3aooqxf.png\" alt=\"Code Image\" loading=\"lazy\"></a><br>\n<br></p>\n<h2>\n  <a name=\"3-nullish-coalescing\" href=\"#3-nullish-coalescing\">\n  </a>\n  3. Nullish Coalescing\n</h2>\n\n<p>Nullish coalescing adds the ability to truly check <code>nullish</code> values instead of <code>falsey</code> values. What is the difference between <code>nullish</code> and <code>falsey</code> values, you might ask?</p>\n\n<p>In JavaScript, many values are <code>falsey</code>, like empty strings, the number 0, <code>undefined</code>, <code>null</code>, <code>false</code>, <code>NaN</code>, and so on.</p>\n\n<p>However, you might want to check an immense number of times if a variable is nullish – that is if it is either <code>undefined</code> or <code>null</code>, like when it's okay for a variable to have an empty string or even a false value.</p>\n\n<p>In that case, you'll use the new nullish coalescing operator, <code>??</code></p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TjON4s6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uupnryjugtdtb6xvv7yk.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--TjON4s6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uupnryjugtdtb6xvv7yk.png\" alt=\"Code Image\" loading=\"lazy\"></a></p>\n\n<p>You can clearly see how the <strong>OR</strong> operator always returns a truthy value, whereas the nullish operator returns a non-nullish value.</p>\n<h2>\n  <a name=\"4-optional-chaining\" href=\"#4-optional-chaining\">\n  </a>\n  4. Optional Chaining\n</h2>\n\n<p>Optional chaining syntax allows you to access deeply nested object properties without worrying if the property exists or not. If it exists, great! If not, <code>undefined</code> will be returned. This works on object properties but also on function calls and arrays. Super convenient! Like this example:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DtuS8h-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4w5zkv64r0cs46xpjie.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--DtuS8h-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4w5zkv64r0cs46xpjie.png\" alt=\"Code Image\" loading=\"lazy\"></a></p>\n<h2>\n  <a name=\"5-promiseallsettled\" href=\"#5-promiseallsettled\">\n  </a>\n  5. Promise.allSettled\n</h2>\n\n<p>The <code>Promise.allSettled</code> method accepts an array of Promises and only resolves when all of them are settled – either resolved or rejected.</p>\n\n<p>This was not available natively before, even though some close implementations like <code>race</code> and <code>all</code> were available.</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5mYk_5cf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xi1hpkcazxgxsl81d90.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--5mYk_5cf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xi1hpkcazxgxsl81d90.png\" alt=\"Code Image\" loading=\"lazy\"></a><br>\n<br></p>\n<h2>\n  <a name=\"6-stringmatchall\" href=\"#6-stringmatchall\">\n  </a>\n  6. String#matchAll\n</h2>\n\n<p><code>matchAll</code> is a new method added to the <code>String</code> prototype which is related to Regular Expressions. This returns an iterator that returns all matched groups one after another. Take a look at this example:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lt7PKviz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmmk478r36d1bfjovi1v.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--lt7PKviz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmmk478r36d1bfjovi1v.png\" alt=\"Code Image\" loading=\"lazy\"></a><br>\n<br></p>\n<h2>\n  <a name=\"7-globalthis\" href=\"#7-globalthis\">\n  </a>\n  7. globalThis\n</h2>\n\n<p>If you wrote some cross-platform JS code that could run on Node, in the browser environment, and also inside web-workers, you'd have a hard time getting hold of the global object.</p>\n\n<p>This is because it is <code>window</code> for browsers, <code>global</code> for Node, and <code>self</code> for web workers. If there are more runtimes, the global object will be different for them as well.</p>\n\n<p>So you would have had to have your own implementation of detecting runtime and then using the correct global. Hence, ES2020 brought <code>globalThis</code> which always refers to the global object, no matter where you are executing your code:</p>\n\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--s-Fy9pEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5dczfi8moefwl4y1jo6.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--s-Fy9pEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5dczfi8moefwl4y1jo6.png\" alt=\"Code Image\" loading=\"lazy\"></a><br>\n<br></p>\n<h2>\n  <a name=\"8-module-namespace-exports\" href=\"#8-module-namespace-exports\">\n  </a>\n  8. Module Namespace Exports\n</h2>\n\n<p>In JavaScript modules, it was already possible to use the following syntax:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">utils</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./utils.mjs</span><span class=\"dl\">'</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>However, no symmetric <code>export</code> syntax existed, until now:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">export</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">utils</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./utils.mjs</span><span class=\"dl\">'</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>This is equivalent to the following:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">utils</span> <span class=\"k\">from</span> <span class=\"dl\">'</span><span class=\"s1\">./utils.mjs</span><span class=\"dl\">'</span>\n<span class=\"k\">export</span> <span class=\"p\">{</span> <span class=\"nx\">utils</span> <span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"9-well-defined-forin-order\" href=\"#9-well-defined-forin-order\">\n  </a>\n  9. Well defined for-in order\n</h2>\n\n<p>The ECMA specification did not specify in which order <code>for (x in y)</code> should run. Even though browsers implemented a consistent order on their own before now, this has been officially standardized in ES2020.</p>\n\n<h2>\n  <a name=\"10-importmeta\" href=\"#10-importmeta\">\n  </a>\n  10. import.meta\n</h2>\n\n<p>The <code>import.meta</code> object was created by the ECMAScript implementation, with a <code>null</code> prototype.</p>\n\n<p>Consider a module, <code>module.js</code>:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight html\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"module\"</span> <span class=\"na\">src=</span><span class=\"s\">\"module.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>You can access meta information about the module using the <code>import.meta</code> object:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight javascript\"><code><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">import</span><span class=\"p\">.</span><span class=\"nx\">meta</span><span class=\"p\">);</span> <span class=\"c1\">// { url: \"file:///home/user/module.js\" }</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>It returns an object with a <code>url</code> property indicating the base URL of the module. This will either be the URL from which the script was obtained (for external scripts) or the document base URL of the containing document (for inline scripts).</p>\n\n\n<hr>\n\n<p>Thank you very much for reading this article.</p>\n\n<p>Comment any features that you like of javascript and a feature that you think should be improved in the next ES</p>\n\n<p><strong>PLEASE LIKE, SHARE AND COMMENT</strong></p>\n\n<p>Follow me on <a href=\"https://dev.to/garvitmotwani\">Dev</a> and <a href=\"https://twitter.com/garvitmotwani\">Twitter</a></p>\n\n","body_markdown":"I am starting this new series called Tip Tuesday in which I will write an article which includes some tips & tricks every Tuesday. So please follow me to stay updated!!\n\nHey Devs, the new ES2020 features have been up for a while now, but not everybody knows them, so here are some cool features to try out!\n\n**It would be really helpful if you like, share and comment**\n\nTip Tuesday - 30/3/2021\n\n## 1. BigInt\nBigInt, one of the most anticipated features in JavaScript, is finally here. It actually allows developers to have a much greater integer representation in their JS code for data processing for data handling.\n\nAt the moment the maximum number you can store as an integer in JavaScript is `pow(2, 53) - 1`. But BigInt actually allows you to go even beyond that.\n![Code Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/588khrk3rpei76gho4e9.png)\n \nHowever, you need to have an `n` appended at the very end of the number, as you can see above. This `n` denotes that this is a BigInt and should be treated differently by the JavaScript engine (by the v8 engine).\n\nThis improvement is not backward compatible because the traditional number system is IEEE754 (which cannot support numbers of this size).\n<br>\n## 2. Dynamic import\nDynamic imports in JavaScript give you the option to import JS files dynamically as modules in your application natively. This is just like how you do it with Webpack and Babel at the moment.\n\nThis feature will help you ship on-demand-request code, better known as code splitting, without the overhead of webpack or other module bundlers. You can also conditionally load code in an if-else block if you like. The good thing is that you actually import a module, and so it never pollutes the global namespace.\n\n![Code Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utai4m6xcc1nk3aooqxf.png)\n<br>\n## 3. Nullish Coalescing\nNullish coalescing adds the ability to truly check `nullish` values instead of `falsey` values. What is the difference between `nullish` and `falsey` values, you might ask?\n\nIn JavaScript, many values are `falsey`, like empty strings, the number 0, `undefined`, `null`, `false`, `NaN`, and so on.\n\nHowever, you might want to check an immense number of times if a variable is nullish – that is if it is either `undefined` or `null`, like when it's okay for a variable to have an empty string or even a false value.\n\nIn that case, you'll use the new nullish coalescing operator, `??`\n\n ![Code Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uupnryjugtdtb6xvv7yk.png)\n\nYou can clearly see how the **OR** operator always returns a truthy value, whereas the nullish operator returns a non-nullish value.\n\n## 4. Optional Chaining\nOptional chaining syntax allows you to access deeply nested object properties without worrying if the property exists or not. If it exists, great! If not, `undefined` will be returned. This works on object properties but also on function calls and arrays. Super convenient! Like this example:\n\n![Code Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4w5zkv64r0cs46xpjie.png)\n \n## 5. Promise.allSettled\nThe `Promise.allSettled` method accepts an array of Promises and only resolves when all of them are settled – either resolved or rejected.\n\nThis was not available natively before, even though some close implementations like `race` and `all` were available.\n\n![Code Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xi1hpkcazxgxsl81d90.png)\n<br>\n\n## 6. String#matchAll\n`matchAll` is a new method added to the `String` prototype which is related to Regular Expressions. This returns an iterator that returns all matched groups one after another. Take a look at this example:\n\n![Code Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nmmk478r36d1bfjovi1v.png)\n<br>\n\n## 7. globalThis\nIf you wrote some cross-platform JS code that could run on Node, in the browser environment, and also inside web-workers, you'd have a hard time getting hold of the global object.\n\nThis is because it is `window` for browsers, `global` for Node, and `self` for web workers. If there are more runtimes, the global object will be different for them as well.\n\nSo you would have had to have your own implementation of detecting runtime and then using the correct global. Hence, ES2020 brought `globalThis` which always refers to the global object, no matter where you are executing your code:\n\n![Code Image](https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5dczfi8moefwl4y1jo6.png)\n<br>\n\n## 8. Module Namespace Exports\nIn JavaScript modules, it was already possible to use the following syntax:\n\n``` javascript\nimport * as utils from './utils.mjs'\n```\n\nHowever, no symmetric `export` syntax existed, until now:\n\n```javascript\nexport * as utils from './utils.mjs'\n```\n\nThis is equivalent to the following:\n\n```javascript\nimport * as utils from './utils.mjs'\nexport { utils }\n```\n\n## 9. Well defined for-in order\nThe ECMA specification did not specify in which order `for (x in y)` should run. Even though browsers implemented a consistent order on their own before now, this has been officially standardized in ES2020.\n\n\n## 10. import.meta\nThe `import.meta` object was created by the ECMAScript implementation, with a `null` prototype.\n\nConsider a module, `module.js`:\n\n```html\n<script type=\"module\" src=\"module.js\"></script>\n```\n\nYou can access meta information about the module using the `import.meta` object:\n\n```javascript\nconsole.log(import.meta); // { url: \"file:///home/user/module.js\" }\n```\n\nIt returns an object with a `url` property indicating the base URL of the module. This will either be the URL from which the script was obtained (for external scripts) or the document base URL of the containing document (for inline scripts).\n\n---\n\nThank you very much for reading this article.\n\nComment any features that you like of javascript and a feature that you think should be improved in the next ES\n\n**PLEASE LIKE, SHARE AND COMMENT**\n\nFollow me on [Dev](https://dev.to/garvitmotwani) and [Twitter](https://twitter.com/garvitmotwani)\n\n\n \n\n \n\n","user":{"name":"Garvit Motwani","username":"garvitmotwani","twitter_username":"GarvitMotwani","github_username":"code-with-garvit","website_url":null,"profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--WRqjNuSV--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370225/60416eff-f1ff-4a29-a5c9-2a13df7845c8.jpeg","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--g6ecDMKa--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370225/60416eff-f1ff-4a29-a5c9-2a13df7845c8.jpeg"},"organization":{"name":"World In Dev","username":"worldindev","slug":"worldindev","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--xSZxQWbB--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3864/c6f2cf0f-a06c-4603-8a9a-56a612b9697b.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--MOacWSFh--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3864/c6f2cf0f-a06c-4603-8a9a-56a612b9697b.png"},"readingTime":"5 min read"}},"__N_SSG":true}